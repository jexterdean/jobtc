{"changed":false,"filter":false,"title":"discussions-room.js","tooltip":"/public/assets/js/page/discussions-room.js","value":"/* \n * Discussion Room scripts\n */\n\n//Click Toggle Function\n$.fn.clickToggle = function (func1, func2) {\n    var funcs = [func1, func2];\n    this.data('toggleclicked', 0);\n    this.click(function () {\n        var data = $(this).data();\n        var tc = data.toggleclicked;\n        $.proxy(funcs[tc], this)();\n        data.toggleclicked = (tc + 1) % 2;\n    });\n    return this;\n};\n\n//Display name\nvar display_name = $('.display_name').val();\n\n\n//Get Room name\nvar room_name_tmp = window.location.pathname;\nvar room_name = parseInt(room_name_tmp.substr(room_name_tmp.lastIndexOf('/') + 1));\nvar room_number = $('.room_number').val();\nvar tag_type = 'discussions';\n\n\nconsole.log(room_name_tmp);\n\n//For ScreenShare\nvar isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);\nvar hasExtension = false;\n\n\nvar screenshare_count = 0;\nvar participant_count = 0;\n\nvar peerStream;\nvar localPeerId;\nvar screentest;\nvar sfutest;\nvar janusLocalScreenStream;\nvar isRecording = false;\nvar mainVideo;\nvar conversionProgress;\nvar conversionAttempts = 0;\nvar webrtc;\n\n//Initialize Janus for recording\nJanus.init({debug: \"all\", callback: function () {\n            if (!Janus.isWebrtcSupported()) {\n                bootbox.alert(\"No WebRTC support... \");\n                return;\n            }\n            // Create session for Local Video\n}});\n\n\n//default media options\nvar mediaOptions = {\n    audio: true,\n    video: true\n};\n\nvar audioDevices = [];\nvar videoDevices = [];\nvar audioInputSelect = document.querySelector('select#audio-input-list');\nvar videoSelect = document.querySelector('select#video-camera-list');\n    navigator.mediaDevices.enumerateDevices().then(function (devices) {\n      for (var i = 0; i !== devices.length; ++i) {\n          var device = devices[i];\n          if (device.kind === 'audioinput') {\n              audioDevices.push(device);\n              device.label = device.label || 'microphone ' + (audioDevices.length + 1);\n              var option = document.createElement('option');\n              option.value = device.deviceId;\n              option.text = device.label || 'microphone ' + (audioDevices.length + 1);\n              \n              audioInputSelect.appendChild(option);\n              $('#audio-input-list option').attr('data-content',\"<i class='glyphicon glyphicon-volume-up'></i>\");\n              \n              if(localStorage.getItem('audio') == null) {\n                  \n                  mediaOptions.audio = {\n                      deviceId: device.deviceId\n                  };\n                  \n                  console.log('Media Options Audio: '+mediaOptions.audio.deviceId);\n              } else {\n                  \n                mediaOptions.audio = {\n                      deviceId: localStorage.getItem('audio')\n                  };  \n                  \n                $('#audio-input-list').val(localStorage.getItem('audio'));    \n              }\n              \n          } else if (device.kind === 'videoinput') {\n              device.label = device.label || 'camera ' + (videoDevices.length + 1);\n              videoDevices.push(device);\n              console.log(device);\n              var option = document.createElement('option');\n              option.value = device.deviceId;\n              option.text = device.label || 'camera ' + (videoDevices.length + 1);\n              videoSelect.appendChild(option);\n              \n              if(localStorage.getItem('video') == null) {\n                  mediaOptions.video = {\n                      deviceId: device.deviceId\n                  };\n                  \n                  console.log('Media Options Video: '+mediaOptions.video.deviceId);\n              } else {\n                  \n                mediaOptions.video = {\n                      deviceId: localStorage.getItem('video')\n                  };  \n                  \n                $('#video-camera-list').val(localStorage.getItem('video'));    \n              }\n          }\n      }\n});\n\n//Make all video containers resizable\n$( \"#localVideoContainer\" ).resizable({\n    containment: \"#discussions-container\",\n    minHeight: 350,\n    minWidth: 350,\n    grid: 50\n});\n\n$( \"#remoteVideo\" ).sortable({\n     stop: function(event, ui) {\n         var video = ui.item.find('video').get(0);\n        video.play();\n    }\n});\n$( \"#remoteVideo\" ).disableSelection();\n\n webrtc = new SimpleWebRTC({\n                     // the id/element dom element that will hold \"our\" video\n                    localVideoEl: 'localVideoEl',\n                    // the id/element dom element that will hold remote videos\n                    remoteVideosEl: '',\n                    // immediately ask for camera access\n                    autoRequestMedia: false,\n                    debug: true,\n                    localVideo: {\n                        autoplay: true, // automatically play the video stream on the page\n                        mirror: false, // flip the local video to mirror mode (for UX)\n                        muted: true // mute local video stream to prevent echo\n                    },\n                    //peerConnectionConfig:{ iceTransports: 'relay' },\n                    mediaOptions: mediaOptions,\n                    enableDataChannels: true,\n                    detectSpeakingEvents: false,\n                    nick: display_name,    \n                    url: 'https://job.tc:9999'\n            });\n\n\n\n//Immediately start the local video upon entering this discussion room\n\n//Check if room is public\n\n/*if (display_name == 'Anonymous') {\n\n    var display_name_form = public_path + '/displayNameForm';\n\n    BootstrapDialog.show({\n        title: 'Enter your name',\n        size: 'size-normal',\n        message: function (dialog) {\n            var $message = $('<div></div>');\n            var pageToLoad = dialog.getData('pageToLoad');\n            $message.load(pageToLoad);\n            return $message;\n        },\n        buttons: [{\n                label: 'Ok',\n                cssClass: 'btn-edit btn-shadow',\n                action: function (dialog) {\n                    var new_display_name = $('.new_display_name').val();\n                    console.log('new_display_name: '+new_display_name);\n                    $('.display_name').val(new_display_name);\n                    webrtc.startLocalVideo();\n                    webrtc.sendToAll('changeName', {display_name: new_display_name});\n                    dialog.close();\n                }\n            }],\n        data: {\n            'pageToLoad': display_name_form\n        },\n        onshown: function (ref) {\n            //initCkeditor(ref);\n        },\n        closable: false\n    });\n} else {\n    \n    webrtc.startLocalVideo();\n}*/\n\nwebrtc.startLocalVideo();\n\nwebrtc.on('localStream', function (stream) {\n    console.log('this is the localstream : ' + JSON.stringify(stream));\n    localStream = stream;\n    mainVideo = stream;\n    console.log(webrtc.webrtc.localStreams[0]);\n});\n\n/*For Video Sharing*/\n// a peer video has been added\nwebrtc.on('videoAdded', function (video, peer) {\n    $('.incoming-user-sound').get(0).play();\n    console.log('video added', peer.nick);\n    peerStream = peer.stream;\n    console.log(peer.stream);\n    var remotes = document.getElementById('remotes');\n    var remoteVideo = document.getElementById('remoteVideo');\n    var remoteScreen = document.getElementById('remoteScreen');\n    var videoTag = $('#localVideoEl')[0];\n    if (remoteVideo) {\n        video.id = 'container_' + webrtc.getDomId(peer);\n        console.log(video.id);\n        //video.style.width = '334px';\n        video.style.width = '100%';\n        // suppress contextmenu\n        video.oncontextmenu = function () {\n            return false;\n        };\n\n        var dom_id = webrtc.getDomId(peer);\n        if (dom_id.includes('screen')) {\n            screenshare_count++;\n            localScreenStream = peer.stream;\n            \n            //video.style.width = '652px';\n            //$(video).attr('controls', 'controls');\n            /*var screenShareOptions = '<div class=\"screenshare_options\">' +\n                    '<button id=\"set-video-' + peer.stream.id + '\" class=\"btn btn-small set-video\">Set as Main Video</button>' +\n                    '<button class=\"btn btn-small full-screen\"><i class=\"fa fa-arrows-alt\" aria-hidden=\"true\"></i></button>' +\n                    '<input class=\"screenshare_id\" type=\"hidden\" value=\"' + screenshare_count + '\"/>' +\n                    '<input class=\"stream_id\" type=\"hidden\" value=\"' + webrtc.getDomId(peer) + '\">' +\n                    '</div>';*/\n             \n             var screenShareOptions = '<div class=\"row\">'+\n                                    '<div class=\"col-xs-5\">'+\n                                        '<button class=\"btn record\"><i class=\"material-icons\">fiber_manual_record</i><span class=\"record-text\">Record</span></button>'+\n                                        '<input class=\"stream_id\" type=\"hidden\" value=\"' + webrtc.getDomId(peer) + '\">' +\n                                        '<input class=\"screenshare_id\" type=\"hidden\" value=\"' + screenshare_count + '\"/>' +\n                                        '<input class=\"video_type\" type=\"hidden\" value=\"remoteScreen\"/>'+\n                                    '</div>'+\n                                    '<div class=\"col-xs-7\">'+\n                                        '<div class=\"btn-group\" role=\"group\" aria-label=\"Screen Media Options\">'+\n                                            '<button class=\"btn full-screen\"><i class=\"material-icons\">fullscreen</i></button>' +\n                                            '<input class=\"screenshare_id\" type=\"hidden\" value=\"' + screenshare_count + '\"/>' +\n                                            '<input class=\"stream_id\" type=\"hidden\" value=\"' + webrtc.getDomId(peer) + '\">' +\n                                            '<input class=\"video_type\" type=\"hidden\" value=\"remoteScreen\"/>'+\n                                        '</div>'+\n                                    '</div>'+\n                                '</div>';        \n                    \n             var collapseContainer = '<div class=\"col-xs-4 remote-screen\" id=\"screenContainer-' + screenshare_count + '\"><div class=\"panel-group\">'+\n    '<div class=\"panel panel-default\">'+\n      '<div class=\"panel-heading\">'+\n        '<h4 class=\"panel-title\">'+\n          '<a data-toggle=\"collapse\" href=\"#remote-screen-collapse-'+screenshare_count+'\">'+peer.nick+' Screen</a>'+\n        '</h4>'+\n      '</div>'+\n      '<div id=\"remote-screen-collapse-'+screenshare_count+'\" class=\"panel-collapse collapse in\">'+\n        '<div class=\"panel-body\">'+\n        '<div class=\"row\">'+\n            '<div class=\"col-xs-5\">'+\n                '<div class=\"blink hidden\"><i class=\"fa fa-circle text-danger\"></i>&nbsp;<span class=\"blink-text\">Recording</span></div>'+\n            '</div>'+\n            '<div class=\"col-xs-7\">'+\n                '<div id=\"progress\" class=\"progress hidden\">'+\n                    '<div style=\"color:#000;font-weight:bold\" class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">Processing 0% Complete'+\n                    '</div>'+\n                    '</div>'+\n                    '<input class=\"processing-percent\" type=\"hidden\" value=\"0\"/>'+\n            '</div>'+\n        '</div>'+\n        '<input class=\"screenshare_id\" type=\"hidden\" value=\"' + screenshare_count + '\"/>' +\n        '</div>'+\n        '<div class=\"panel-footer\">'+screenShareOptions+'</div>'+\n      '</div>'+\n    '</div>'+\n  '</div></div>';                    \n                    \n            var screenContainer = \"<div class='col-xs-6' id='screenContainer-\" + screenshare_count + \"'>\" + screenShareOptions + \"</div>\";\n\n            $(\"#remoteVideo\").append(collapseContainer);\n            //$('#screenContainer-' + screenshare_count).prepend(video);\n            $(\"#remote-screen-collapse-\" + screenshare_count+' .panel-body').prepend(video);\n            \n             $('#screenContainer-'+screenshare_count).resizable({\n                 containment: \"#discussions-container\",\n                 minHeight: 350,\n                 minWidth: 350,\n                 grid: 50\n            });\n            \n              $('body').on('click','#set-video-'+peer.stream.id,function () {\n    \n                //video.style.height = '640px';\n                //video.style.width = '1080px';\n                video.id = 'remote-'+peer.stream.id;\n                //$('#localVideo video').remove();\n                //$('#localVideo').append(video);\n                //document.getElementById('localScreen').removeChild(video);\n                \n                //$('#localVideoContainer').attr('class','col-xs-9');\n                //$('#chat-box-container').attr('class','col-xs-3');\n                //$('#localVideoEl').hide();\n                //$('#localVideo').append(video);\n                videoTag.srcObject = peer.stream;\n                mainVideo = peer.stream;\n                \n                \n                $(this).text('Reset Video');\n                \n                $(this).attr('id','reset-video-'+peer.stream.id);\n                \n                    \n                //var localvideo = $('#localVideoEl').get(0);\n                //localvideo.play();\n                console.log('Setting as main video');\n    });\n    \n    $('body').on('click','#reset-video-'+peer.stream.id,function(){\n       console.log('Resetting Video'); \n       \n       //$('#localVideoEl').show();\n       //$('#remote-'+peer.stream.id).remove();\n       $(this).attr('id','set-video-'+peer.stream.id);\n       videoTag.srcObject = localStream;\n       mainVideo = localStream;\n       $(this).text('Set as Main Video');\n       //$('#localVideo video').remove();\n       //$('#localVideo').append(localStream);\n       \n    });\n            \n        } else {\n\n            participant_count++;\n                    \n                \n            var videoTag = $('#localVideoEl')[0];\n            /*var remoteVideoOptions = '<div class=\"remote_video_options center-block\">' +\n                    '<button id=\"set-video-' + peer.stream.id + '\" class=\"btn btn-small set-video\">Set as Main Video</button>' +\n                    '<button class=\"btn btn-small full-screen\"><i class=\"fa fa-arrows-alt\" aria-hidden=\"true\"></i></button>' +\n                    '<input class=\"participant_id\" type=\"hidden\" value=\"' + participant_count + '\"/>' +\n                    '<input class=\"stream_id\" type=\"hidden\" value=\"' + webrtc.getDomId(peer) + '\">' +\n                    '</div>';*/\n            \n            var remoteVideoOptions = '<div class=\"row\">'+\n                                    '<div class=\"col-xs-5\">'+\n                                        '<button class=\"btn record\"><i class=\"material-icons\">fiber_manual_record</i><span class=\"record-text\">Record</span></button>'+\n                                        '<input class=\"stream_id\" type=\"hidden\" value=\"' + webrtc.getDomId(peer) + '\">' +\n                                        '<input class=\"participant_id\" type=\"hidden\" value=\"' + participant_count + '\"/>' +\n                                        '<input class=\"video_type\" type=\"hidden\" value=\"remote\" />'+\n                                    '</div>'+\n                                    '<div class=\"col-xs-7\">'+\n                                        '<div class=\"btn-group\" role=\"group\" aria-label=\"Remote Media Options\">'+\n                                            '<button class=\"btn  stop-video\"><i class=\"material-icons\">videocam</i></button>'+            \n                                            '<button class=\"btn  mute\"><i class=\"material-icons\">mic</i></button>'+\n                                            '<button class=\"btn full-screen\"><i class=\"material-icons\">fullscreen</i></button>' +\n                                            '<input class=\"participant_id\" type=\"hidden\" value=\"' + participant_count + '\"/>' +\n                                            '<input class=\"stream_id\" type=\"hidden\" value=\"' + webrtc.getDomId(peer) + '\">' +\n                                            '<input class=\"video_type\" type=\"hidden\" value=\"remote\"/>'\n                                        '</div>'+\n                                    '</div>'+\n                                '</div>';\n            \n            \n            var collapseContainer = '<div class=\"col-xs-3 remote-video\" id=\"remoteVideo-' + participant_count + '\"><div class=\"panel-group\">'+\n    '<div class=\"panel panel-default\">'+\n      '<div class=\"panel-heading\">'+\n        '<h4 class=\"panel-title\">'+\n          '<a data-toggle=\"collapse\" href=\"#remote-video-collapse-'+participant_count+'\">'+peer.nick+'</a>'+\n        '</h4>'+\n      '</div>'+\n      '<div id=\"remote-video-collapse-'+participant_count+'\" class=\"panel-collapse collapse in\">'+\n        '<div class=\"panel-body\">'+\n        '<div class=\"row\">'+\n            '<div class=\"col-xs-5\">'+\n                '<div class=\"blink hidden\"><i class=\"fa fa-circle text-danger\"></i>&nbsp;<span class=\"blink-text\">Recording</span></div>'+\n            '</div>'+\n            '<div class=\"col-xs-7\">'+\n                '<div id=\"progress\" class=\"progress hidden\">'+\n                    '<div style=\"color:#000;font-weight:bold\" class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">Processing 0% Complete'+\n                    '</div>'+\n                    '</div>'+\n                    '<input class=\"processing-percent\" type=\"hidden\" value=\"0\"/>'+\n            '</div>'+\n        '</div>'+\n        '<input class=\"participant_id\" type=\"hidden\" value=\"' + participant_count + '\"/>' +\n        '</div>'+\n        '<div class=\"panel-footer\">'+remoteVideoOptions+'</div>'+\n      '</div>'+\n    '</div>'+\n  '</div></div>';\n            \n            var remoteVideoContainer = \"<div class='col-xs-12' id='remoteVideo-\" + participant_count + \"'>\" + remoteVideoOptions + \"</div>\";\n            \n              $('body').on('click','#set-video-'+peer.stream.id,function () {\n    \n                //video.style.height = '640px';\n                //video.style.width = '1080px';\n                video.id = 'remote-'+peer.stream.id;\n                //$('#localVideo video').remove();\n                //$('#localVideo').append(video);\n                //document.getElementById('localScreen').removeChild(video);\n                \n                //$('#localVideoContainer').attr('class','col-xs-9');\n                //$('#chat-box-container').attr('class','col-xs-3');\n                //$('#localVideoEl').hide();\n                //$('#localVideo').append(video);\n                //video.clone().appendTo('#localVideo');\n                videoTag.srcObject = peer.stream;\n                mainVideo = peer.stream;\n                \n                $(this).text('Reset Video');\n                \n                $(this).attr('id','reset-video-'+peer.stream.id);\n                \n                    \n                var remotevideo = $('#remote-'+peer.stream.id).get(0);\n                remotevideo.play();\n                console.log('Setting as main video');\n    });\n    \n    $('body').on('click','#reset-video-'+peer.stream.id,function(){\n       console.log('Resetting Video'); \n       \n       //$('#localVideoEl').show();\n       //$('#remote-'+peer.stream.id).remove();\n       $(this).attr('id','set-video-'+peer.stream.id);\n       videoTag.srcObject = localStream;\n       mainVideo = localStream;\n       $(this).text('Set as Main Video');\n       //$('#localVideo video').remove();\n       //$('#localVideo').append(localStream);\n       \n    });\n            console.log('hasAudio: '+JSON.stringify(mediaOptions.audio));\n            console.log('hasVideo: '+JSON.stringify(mediaOptions.video));\n            $(\"#remoteVideo\").append(collapseContainer);\n            //$(\"#remoteVideo-\" + participant_count).prepend(video);\n            $(\"#remote-video-collapse-\" + participant_count+' .panel-body').prepend(video);\n            \n            $('#remoteVideo-'+participant_count).resizable({\n                 containment: \"#discussions-container\",\n                 minHeight: 350,\n                 minWidth: 350,\n                 grid: 50\n            });\n        }\n\n        //remotes.appendChild(container);\n    }\n    // show the ice connection state\n    if (peer && peer.pc) {\n        var connstate = document.createElement('div');\n        connstate.className = 'connectionstate';\n        remoteVideo.appendChild(connstate);\n        peer.pc.on('iceConnectionStateChange', function (event) {\n            switch (peer.pc.iceConnectionState) {\n                case 'checking':\n                    connstate.innerText = 'Connecting to peer...';\n                    break;\n                case 'connected':\n                case 'completed': // on caller side\n                    connstate.innerText = 'Connection established.';\n                    connstate.remove();\n                    simpleRtcConnected = 1;\n                    break;\n                case 'disconnected':\n                    connstate.innerText = 'Disconnected.';\n                    break;\n                case 'failed':\n                    break;\n                case 'closed':\n                    connstate.innerText = 'Connection closed.';\n                    connstate.remove();\n                    break;\n            }\n        });\n    }\n\n    // receiving an incoming filetransfer\n    peer.on('fileTransfer', function (metadata, receiver) {\n        console.log('incoming filetransfer', metadata.name, metadata);\n        receiver.on('progress', function (bytesReceived) {\n            console.log('receive progress', bytesReceived, 'out of', metadata.size);\n        });\n        // get notified when file is done\n        receiver.on('receivedFile', function (file, metadata) {\n            console.log('received file', metadata.name, metadata.size);\n            console.log(\"file:\" + file);\n\n            var file_url = window.URL.createObjectURL(file);\n\n            $(\"#message-log\").prepend('<a href=\"' + file_url + '\" download=\"' + metadata.name + '\"><i class=\"fa fa-file\" aria-hidden=\"true\"></i>' + metadata.name + '</a><br />');\n\n            // close the channel\n            receiver.channel.close();\n        });\n        //filelist.appendChild(item);\n    });\n\n    // send a file\n    $('#sendFile').change(function () {\n\n        var file = this.files[0];\n        var name = file.name;\n        var size = file.size;\n        var type = file.type;\n        console.log(\"Sending File: \" + name);\n        console.log(\"Size: \" + size);\n        console.log(\"Type: \" + type);\n        //webrtc.sendToAll('fileTransfer', {name: name, size: size, type: type});\n        $(\"#message-log\").prepend('<text>Sending file: ' + name + ' ' + size + ' bytes</text>');\n        var sender = peer.sendFile(file);\n    });\n});\n\n// a peer video was removed\nwebrtc.on('videoRemoved', function (video, peer) {\n    console.log('video removed ', peer);\n    var remotes = document.getElementById('remotes');\n    var remoteVideo = document.getElementById('remoteVideo');\n    var remoteScreen = document.getElementById('remoteScreen');\n    var el = document.getElementById(peer ? 'container_' + webrtc.getDomId(peer) : 'localScreenContainer');\n    \n    //if (remotes && el) {\n        var dom_id = webrtc.getDomId(peer);\n        if (dom_id.includes('video')) {\n            //$('#remoteVideo').find('#remoteVideo-'+participant_count).remove();\n            var remote_video_id = $('#container_' + webrtc.getDomId(peer)).parent().attr('id');\n            var participant_id = $(video).siblings('.participant_id').val();\n            console.log('participant_id: '+participant_id);\n            $('#remoteVideo-'+participant_id).remove();\n            //$('#remoteVideo-'+webrtc.getDomId(peer)).remove();\n            //console.log($(el).parent().attr('id'));\n            //remoteVideo.removeChild(el);\n        }\n\n        if (dom_id.includes('screen')) {\n            //remoteScreen.removeChild(el);\n            var remote_video_id = $('#container_' + webrtc.getDomId(peer)).parent().attr('id');\n            var screenshare_id = $(video).siblings('.screenshare_id').val();\n            $('#screenContainer-'+screenshare_id).remove();\n            console.log('remote_video_id:' + remote_video_id);\n            //$('#screenContainer-'+webrtc.getDomId(peer)).remove();\n            \n            //$('#' + remote_video_id).remove();\n            //$(video).parent().remove();\n            //console.log($(el).attr('id'));\n            //remoteVideo.removeChild(el);\n        }\n    //}\n\n    /*if (remotes && el) {\n     remotes.removeChild(el);\n     }*/\n});\n\n//local mute/unmute events\nwebrtc.on('audioOn', function () {\n    // your local audio just turned on\n\n});\nwebrtc.on('audioOff', function () {\n    // your local audio just turned off\n\n});\nwebrtc.on('videoOn', function () {\n    // local video just turned on\n});\nwebrtc.on('videoOff', function () {\n    // local video just turned off\n});\n\nwebrtc.on('stunservers', function () {\n    //console.log('using a stun server');\n});\n\nwebrtc.on('turnservers', function () {\n    //console.log('using a turn server');\n});\n\n// local p2p/ice failure\nwebrtc.on('iceFailed', function (peer) {\n    var pc = peer.pc;\n    console.log('had local relay candidate', pc.hadLocalRelayCandidate);\n    console.log('had remote relay candidate', pc.hadRemoteRelayCandidate);\n});\n\n// remote p2p/ice failure\nwebrtc.on('connectivityError', function (peer) {\n    var pc = peer.pc;\n    console.log('had local relay candidate', pc.hadLocalRelayCandidate);\n    console.log('had remote relay candidate', pc.hadRemoteRelayCandidate);\n});\n\n// listen for mute and unmute events\nwebrtc.on('mute', function (data) { // show muted symbol\n    webrtc.getPeers(data.id).forEach(function (peer) {\n        if (data.name == 'audio') {\n            $('#container_' + webrtc.getDomId(peer) + ' .muted').show();\n        } else if (data.name == 'video') {\n            $('#container_' + webrtc.getDomId(peer) + ' .paused').show();\n            $('#container_' + webrtc.getDomId(peer) + ' video').hide();\n        }\n    });\n});\n\nwebrtc.on('unmute', function (data) { // hide muted symbol\n    webrtc.getPeers(data.id).forEach(function (peer) {\n        if (data.name == 'audio') {\n            $('#videocontainer_' + webrtc.getDomId(peer) + ' .muted').hide();\n        } else if (data.name == 'video') {\n            $('#container_' + webrtc.getDomId(peer) + ' video').show();\n            $('#container_' + webrtc.getDomId(peer) + ' .paused').hide();\n        }\n    });\n});\n\n// called when a peer is created\nwebrtc.on('createdPeer', function (peer) {\n    console.log('createdPeer', peer.stream);\n    \n});\n\nwebrtc.on('localScreen', function (video) {\n    console.log('created localScreen');\n    console.log(webrtc.getDomId(video));\n});\n\n/*For Screensharing*/\n// local screen obtained\nwebrtc.on('localScreenAdded', function (video) {\n    //Get the local screen media stream object\n\n    screenshare_count++;\n    video.id = \"localScreen-\" + screenshare_count;\n    video.class = \"localScreen\";\n    localScreenStream = webrtc.getLocalScreen();\n    console.log('This is the local screenshare stream: ' + JSON.stringify(video));\n    //video.style.width = '334px';\n    video.style.width = '100%';\n    //$(video).attr('controls', 'controls');\n\n    /*var screenShareOptions = '<div class=\"screenshare_options\">' +\n            '<button id=\"set-video-'+webrtc.getDomId(localScreenStream)+'\" class=\"btn btn-small screen-set-video\">Set as Main Video</button>' +\n            '<button class=\"btn btn-small full-screen\"><i class=\"fa fa-arrows-alt\" aria-hidden=\"true\"></i></button>' +\n            '<button class=\"btn btn-small stop-screen-share\">' +\n            '<i class=\"fa fa-times\" aria-hidden=\"true\"></i>' +\n            '</button>' +\n            '<input class=\"screenshare_id\" type=\"hidden\" value=\"' + screenshare_count + '\"/>' +\n            '</div>';*/\n            \n     var screenShareOptions = '<div class=\"row\">'+\n                                    '<div class=\"col-xs-5\">'+\n                                        '<button class=\"btn record\"><i class=\"material-icons\">fiber_manual_record</i><span class=\"record-text\">Record</span></button>'+\n                                        '<input class=\"screenshare_id\" type=\"hidden\" value=\"' + screenshare_count + '\"/>' +\n                                        '<input class=\"video_type\" type=\"hidden\" value=\"localScreen\"/>'+\n                                    '</div>'+\n                                    '<div class=\"col-xs-7\">'+\n                                        '<div class=\"btn-group\" role=\"group\" aria-label=\"Local Screen Media Options\">'+\n                                            '<button class=\"btn btn-small stop-screen-share\">' +\n                                            '<i class=\"material-icons\">close</i>' +\n                                            '</button>' +\n                                            '<input class=\"screenshare_id\" type=\"hidden\" value=\"' + screenshare_count + '\"/>' +\n                                            '<input class=\"video_type\" type=\"hidden\" value=\"localScreen\" />'+\n                                        '</div>'+\n                                    '</div>'+\n                                '</div>';                \n            \n            \n      var collapseContainer = '<div class=\"col-xs-4 remote-screen\" id=\"screenContainer-' + screenshare_count + '\"><div class=\"panel-group\">'+\n    '<div class=\"panel panel-default\">'+\n      '<div class=\"panel-heading\">'+\n        '<h4 class=\"panel-title\">'+\n          '<a data-toggle=\"collapse\" href=\"#remote-screen-collapse-'+screenshare_count+'\">'+display_name+' Screen</a>'+\n        '</h4>'+\n      '</div>'+\n      '<div id=\"remote-screen-collapse-'+screenshare_count+'\" class=\"panel-collapse collapse in\">'+\n        '<div class=\"panel-body\">'+\n        '<div class=\"row\">'+\n            '<div class=\"col-xs-5\">'+\n                '<div class=\"blink hidden\"><i class=\"fa fa-circle text-danger\"></i>&nbsp;<span class=\"blink-text\">Recording</span></div>'+\n            '</div>'+\n            '<div class=\"col-xs-7\">'+\n                '<div id=\"progress\" class=\"progress hidden\">'+\n                    '<div style=\"color:#000;font-weight:bold\" class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">Processing 0% Complete'+\n                    '</div>'+\n                    '</div>'+\n                    '<input class=\"processing-percent\" type=\"hidden\" value=\"0\"/>'+\n            '</div>'+\n        '</div>'+\n        '<input class=\"screenshare_id\" type=\"hidden\" value=\"' + screenshare_count + '\"/>' +\n        '</div>'+\n        '<div class=\"panel-footer\">'+screenShareOptions+'</div>'+\n      '</div>'+\n    '</div>'+\n  '</div></div>';                            \n            \n    var screenContainer = \"<div class='col-xs-12' id='screenContainer-\" + screenshare_count + \"'>\" + screenShareOptions + \"</div>\";\n    \n    var videoTag = $('#localVideoEl')[0];    \n      $('body').on('click','#set-video-'+webrtc.getDomId(localScreenStream),function () {\n                \n                //video.style.height = '640px';\n                //video.style.width = '1080px';\n                video.id = 'screen-'+webrtc.getDomId(localScreenStream);\n                //$('#localVideo video').remove();\n                //$('#localVideo').append(video);\n                //document.getElementById('localScreen').removeChild(video);\n                \n                //$('#localVideoContainer').attr('class','col-xs-9');\n                //$('#chat-box-container').attr('class','col-xs-3');\n                //$('#localVideoEl').hide();\n                //$('#localVideo').append(video);\n                \n                \n                videoTag.srcObject = localScreenStream;\n                mainVideo = localScreenStream;\n                $(this).text('Reset Video');\n                \n                $(this).attr('id','reset-video-'+webrtc.getDomId(localScreenStream));\n                \n                    \n                //var localvideo = $('#localVideo video').get(0);\n                //localvideo.play();\n                console.log('Setting as main video');\n    });\n    \n    $('body').on('click','#reset-video-'+webrtc.getDomId(localScreenStream),function(){\n       console.log('Resetting Video'); \n       \n       //$('#localVideoEl').show();\n       //$('#screen-'+webrtc.getDomId(localScreenStream)).remove();\n       $(this).attr('id','set-video-'+webrtc.getDomId(localScreenStream));\n       \n        videoTag.srcObject = localStream;\n        mainVideo = localStream;\n       \n       $(this).text('Set as Main Video');\n       //$('#localVideo video').remove();\n       //$('#localVideo').append(localStream);\n       \n    });\n     \n    //if(isRecording == false) {\n        $(\"#remoteVideo\").append(collapseContainer);\n        $(\"#remote-screen-collapse-\" + screenshare_count+' .panel-body').prepend(video);\n        $('#screenContainer-'+screenshare_count).resizable({\n                 containment: \"#discussions-container\",\n                 minHeight: 350,\n                 minWidth: 350,\n                 grid: 50\n        });\n        //$('#screenContainer-' + screenshare_count).prepend(video);\n        //$('#screenContainer-'+screenshare_count).append('<button class=\"btn btn-small stop-screen-share\"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></button>');\n        //$('#screenContainer-'+screenshare_count).append('<input class=\"screenshare_id\" type=\"hidden\" value=\"'+screenshare_count+'\"/>');\n        hasShareScreen = 1;\n    //}\n\n});\n// local screen removed\nwebrtc.on('localScreenRemoved', function (video) {\n    document.getElementById('localScreen').removeChild(video);\n    //$('#localScreenContainer').hide();\n    $('#localScreen').html('');\n    hasShareScreen = 0;\n});\n\n// we have to wait until it's ready\nwebrtc.on('readyToCall', function () {\n    // you can name it anything\n    webrtc.joinRoom(room_name_tmp, function () {\n        $('#localVideoOptions').removeClass('hidden');\n    });\n\n});\n\nwebrtc.connection.on('message', function (data) {\n    if (data.type === 'chat') {\n        console.log('chat received' + JSON.stringify(data));\n        var message = data.payload.message;\n         var regex = /(https?:\\/\\/([-\\w\\.]+)+(:\\d+)?(\\/([-\\w/_\\.]*(\\?\\S+)?)?)?)/ig;\n         \n        // Replace plain text links by hyperlinks\n        var replaced_text = message.replace(regex, \"<a href='$1' target='_blank'>$1</a>\");\n        \n        var chat_message = '<div class=\"row\"><div class=\"col-xs-6\">'+ data.payload.display_name + '</div><div class=\"col-xs-6\"></div></div><div class=\"row\"><div class=\"col-xs-8 chat-bubble-left\">'+replaced_text+'</div></div>';\n        $('.incoming-chat-sound').get(0).play();\n        $('#message-log').prepend(chat_message);\n        \n        if($('#chat-box-container').hasClass(\"is-hidden\") == true) {\n            var chat_count = parseInt($('.chat-badge').text()) + 1;\n            $('.chat-badge').text(chat_count);\n            $('.toggle-panel-chat').effect('highlight');\n        }\n    }\n    if(data.type === 'changeName') {\n        console.log('Received displayName ' + data.payload.display_name);\n    }\n   \n});\n\nwebrtc.on('channelMessage', function (peer, label, data) {\n  if (data.type == 'setDisplayName') {\n      var name = data.payload;\n      console.log('Received displayName ' + name + ' from peer ' + peer.id);\n  }\n});\n\n// local volume has changed\nwebrtc.on('volumeChange', function (volume, treshold) {\n    //showVolume(document.getElementById('localVolume'), volume);\n});\n\n// remote volume has changed\nwebrtc.on('remoteVolumeChange', function (peer, volume) {\n    //showVolume(document.getElementById('volume_' + peer.stream.id), volume);\n    var this_id = $('#volume_' + peer.stream.id).siblings('.participant_id').val();\n    \n    if(volume >= -50) {\n        //$('#remoteVideo-'+this_id+' .panel-heading').animate({'backgroundColor':'#42bcf4'},100).animate({'backgroundColor':'#f5f5f5'},100);  ;\n    }\n});\n\n//For Recording\nvar server = \"https://extremefreedom.org:8089/janus\";\nvar media_server_url = \"extremefreedom.org\";\nvar rec_dir = 'https://extremefreedom.org/recordings';\n\n\n\n//Remove video when the tab closes\nwindow.addEventListener(\"beforeunload\", function (e) {\n    webrtc.leaveRoom(room_name_tmp);\n    webrtc.stopLocalVideo();\n});\n\n$('body').on('click','.mute',function(){\n    var muteText = $(this).children('.material-icons').text();\n    var video_type = $(this).siblings('.video_type').val();\n    if(muteText == 'mic_off') {\n        if(video_type == 'local') { \n            webrtc.unmute();\n        } else {\n            var video_id = 'container_'+$(this).siblings('.stream_id').val();\n             var remoteVideo = document.getElementById(video_id);\n             remoteVideo.volume = 1;\n             \n        }\n        $(this).children('.material-icons').text('mic');   \n        console.log('Mic On');\n    } else {\n        if(video_type == 'local') { \n            webrtc.mute();\n        } else {\n            var video_id = 'container_'+$(this).siblings('.stream_id').val();\n             var remoteVideo = document.getElementById(video_id);\n             remoteVideo.volume = 0;\n        }\n        $(this).children('.material-icons').text('mic_off');   \n        console.log('Mic Off');\n    }\n});\n\n$('body').on('click','.stop-video',function(){\n    var muteText = $(this).children('.material-icons').text();\n    var video_type = $(this).siblings('.video_type').val();\n    if(muteText == 'videocam_off') {\n        if(video_type == 'local') { \n            webrtc.resumeVideo();\n        } else {\n            var video_id = 'container_'+$(this).siblings('.stream_id').val();\n             var remoteVideo = document.getElementById(video_id);\n             remoteVideo.play();\n             \n        }\n        $(this).children('.material-icons').text('videocam');   \n        console.log('Video On');\n    } else {\n        if(video_type == 'local') { \n            webrtc.pauseVideo();\n        } else {\n            var video_id = 'container_'+$(this).siblings('.stream_id').val();\n             var remoteVideo = document.getElementById(video_id);\n             remoteVideo.pause();\n        }\n        $(this).children('.material-icons').text('videocam_off');   \n        console.log('Video Off');\n    }\n});\n\n$('.share-screen').click(function () {\n    webrtc.shareScreen(function (err) {\n        if (err) {\n            console.log(\"Screensharing error :\" + err);\n            $('.screen-share').click();\n            if (err == 'EXTENSION_UNAVAILABLE: NavigatorUserMediaError') {\n                if (isChrome) {\n                    if (hasExtension == false) {\n                        BootstrapDialog.show({\n                            title: 'Extension not installed',\n                            message: 'Please install the plugin for screensharing. <a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/jobtc-screensharing-exten/eciifjfhlbmnofcnnjhodcbjnfhjcelp/related\">Install<a>',\n                            buttons: [{\n                                    label: 'Close',\n                                    action: function (dialog) {\n                                        dialog.close();\n                                    }\n                                }]\n                        });\n                    }\n                }\n            }\n        } else {\n            console.log(\"Screensharing active\");\n        }\n    });\n});\n\n$('body').on('click', '.stop-screen-share', function () {\n\n    var screenshare_id = $('.screenshare_id').val();\n    $('#screenContainer-' + screenshare_id).remove();\n     webrtc.stopScreenShare();\n     webrtc.leaveRoom(room_name_tmp);      \n     webrtc.stopLocalVideo();\n     webrtc.startLocalVideo();\n    //This solves a bug related to screensharing(First screen share not being disposed properly)\n    \n    //webrtc.stopLocalVideo(); \n    //webrtc.startLocalVideo(); \n    console.log(\"Screensharing deactivated\");\n    //var stream = webrtc.getLocalScreen();\n    //if (stream) {\n        //stream.getTracks().forEach(function (track) { track.stop(); });\n    //}\n    //$('.localScreen').remove();\n    //$('.stop-screen-share').remove();\n});\n\n$('#message').keyup(function () {\n    var message = $(\"#message\").val().length;\n    if (message != 0) {\n        $('#send-message').attr('disabled', false);\n    } else {\n        $('#send-message').attr('disabled', true);\n    }\n});\n\n$('#send-message').click(function () {\n    var message = $(\"#message\").val();\n    \n    var regex = /(https?:\\/\\/([-\\w\\.]+)+(:\\d+)?(\\/([-\\w/_\\.]*(\\?\\S+)?)?)?)/ig;\n        // Replace plain text links by hyperlinks\n    var replaced_text = message.replace(regex, \"<a href='$1' target='_blank'>$1</a>\");\n\n    //var message_object = '<text>' + webrtc.config.nick + \" : \" + message + '</text><br />';\n    var message_object = '<div class=\"row\"><div class=\"col-xs-6\">'+ webrtc.config.nick + '</div><div class=\"col-xs-6\"></div></div><div class=\"row\"><div class=\"col-xs-8 chat-bubble-left\">'+replaced_text+'</div></div>';\n    \n    $('#message-log').prepend(message_object);\n    $(\"#message\").val(\"\");\n    //webrtc.sendToAll('chat', {message: message, display_name: webrtc.config.nick});\n    webrtc.sendToAll('chat', {message: message, display_name: display_name});\n    saveMessage(display_name,replaced_text);\n});\n\n//Keypress events\n$('body').keypress(function (e) {\n    if (e.which == 13) {\n        var message = $(\"#message\").val();\n          var regex = /(https?:\\/\\/([-\\w\\.]+)+(:\\d+)?(\\/([-\\w/_\\.]*(\\?\\S+)?)?)?)/ig;\n        // Replace plain text links by hyperlinks\n         var replaced_text = message.replace(regex, \"<a href='$1' target='_blank'>$1</a>\");\n        if (message !== \"\") {\n            //$('#message-log').prepend('<text>' + webrtc.config.nick + \" : \" + message + '</text><br />');\n            var message_object = '<div class=\"row\"><div class=\"col-xs-6\">'+ webrtc.config.nick + '</div><div class=\"col-xs-6\"></div></div><div class=\"row\"><div class=\"col-xs-8 chat-bubble-left\">'+replaced_text+'</div></div>';\n            $('#message-log').prepend(message_object);\n            $(\"#message\").val(\"\");\n            //webrtc.sendToAll('chat', {message: message, display_name: webrtc.config.nick});\n            webrtc.sendToAll('chat', {message: message, display_name: display_name});\n            saveMessage(display_name,replaced_text);\n        }\n        return false;\n    }\n});\n\n$('body').on('click', '.full-screen', function () {\n    var video_id = 'container_'+$(this).siblings('.stream_id').val();\n    \n    var localVideo = document.getElementById(video_id);\n\n    // go full-screen\n    if (localVideo.requestFullscreen) {\n        localVideo.requestFullscreen();\n    } else if (localVideo.webkitRequestFullscreen) {\n        localVideo.webkitRequestFullscreen();\n    } else if (localVideo.mozRequestFullScreen) {\n        localVideo.mozRequestFullScreen();\n    } else if (localVideo.msRequestFullscreen) {\n        localVideo.msRequestFullscreen();\n    }\n\n    console.log('full screen video id: ' + video_id);\n});\n\n$('.add-participant').click(function (e) {\n    e.preventDefault();\n\n    var add_participant_form = public_path + '/addParticipantForm';\n\n    BootstrapDialog.show({\n        title: 'Add Participant',\n        size: 'size-normal',\n        message: function (dialog) {\n            var $message = $('<div></div>');\n            var pageToLoad = dialog.getData('pageToLoad');\n            $message.load(pageToLoad);\n            return $message;\n        },\n        buttons: [{\n                label: 'Send Invitation',\n                cssClass: 'btn-edit btn-shadow',\n                action: function (dialog) {\n                    var ajaxurl = public_path + 'addParticipant';\n\n                    var formData = new FormData();\n                    var email = $('.email').val();\n                    var room_url = window.location.href;\n\n                    formData.append('email', email);\n                    formData.append('room_url', room_url);\n                    console.log(room_url);\n\n                    var $button = this; // 'this' here is a jQuery object that wrapping the <button> DOM element.\n                    $button.disable();\n                    $button.spin();\n\n                    $.ajax({\n                        url: ajaxurl,\n                        type: \"POST\",\n                        data: formData,\n                        // THIS MUST BE DONE FOR FILE UPLOADING\n                        contentType: false,\n                        processData: false,\n                        beforeSend: function () {\n\n                        },\n                        success: function (data) {\n                            dialog.close();\n                        },\n                        error: function (xhr, status, error) {\n\n                        }\n                    }); //ajax\n                }\n            }, {\n                label: 'Cancel',\n                cssClass: 'btn-delete btn-shadow',\n                action: function (dialog) {\n                    dialog.close();\n                }\n            }],\n        data: {\n            'pageToLoad': add_participant_form\n        },\n        onshown: function (ref) {\n            //initCkeditor(ref);\n        },\n        closable: false\n    });\n\n});\n\n$('body').on('click','.record',function(){\n    var muteText = $(this).children('.material-icons').text();\n    var video_type = $(this).siblings('.video_type').val();\n    console.log(muteText);\n    console.log(video_type);\n    if(muteText == 'fiber_manual_record') {\n        if(video_type == 'local') { \n            mainVideo = localStream;\n            var container = 'localVideoContainer';\n            createJanusLocalStream(container);    \n        } else if(video_type == 'localScreen') { \n            mainVideo = localScreenStream;\n            var screenshare_id = $(this).siblings('.screenshare_id').val();\n            var container = 'screenContainer-'+screenshare_id;\n            createJanusLocalStream(container);    \n        } else if(video_type == 'remoteScreen') {    \n            \n             var video_id = 'container_'+$(this).siblings('.stream_id').val();\n             var screenshare_id = $(this).siblings('.screenshare_id').val();\n             var remoteVideo = document.getElementById(video_id);\n             mainVideo = $('#'+video_id)[0].srcObject;\n             var container = 'screenContainer-'+screenshare_id;\n             console.log(container);\n             createJanusLocalStream(container);    \n            \n        } else {\n             var video_id = 'container_'+$(this).siblings('.stream_id').val();\n             var participant_id = $(this).siblings('.participant_id').val();\n             var remoteVideo = document.getElementById(video_id);\n             mainVideo = $('#'+video_id)[0].srcObject;\n             var container = 'remoteVideo-'+participant_id;\n             console.log(container);\n             createJanusLocalStream(container);    \n        }\n        isRecording = true;\n        $(this).css('background-color','orange');\n        $(this).children('.material-icons').text('stop');\n        $(this).find('.record-text').text('Starting...');\n        $(this).attr('disabled',true);\n    } else {\n        sfutest.send({\"message\": stop});\n        sfutest.detach();\n        isRecording = false;\n        $(this).css('background-color','#d7efed');\n        $(this).children('.material-icons').text('fiber_manual_record');\n        $(this).find('.record-text').text('Record');\n        //$(this).text('Start Recording');\n        $('.blink').addClass('hidden');    \n    }\n});\n\nfunction createJanusLocalStream(container) {\n    janus = new Janus({\n        server: server,\n        success: function () {\n            //Local Video\n            janus.attach({\n                plugin: \"janus.plugin.recordplay\",\n                success: function (pluginHandle) {\n                    sfutest = pluginHandle;\n                    startRecordingLocalStream();\n                },\n                error: function (error) {\n                    Janus.error(\"  -- Error attaching plugin...\", error);\n                    bootbox.alert(\"  -- Error attaching plugin... \" + error);\n                },\n                consentDialog: function (on) {\n                    Janus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n                },\n                webrtcState: function (on) {\n                    Janus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n                },\n                onmessage: function (msg, jsep) {\n                    Janus.debug(\" ::: Got a message :::\");\n                    Janus.debug(JSON.stringify(msg));\n                    var result = msg[\"result\"];\n                    console.log(\"result: \" + result);\n                    if (result !== null && result !== undefined) {\n                        if (result[\"status\"] !== undefined && result[\"status\"] !== null) {\n                            var event = result[\"status\"];\n                            if (event === 'preparing') {\n                                Janus.log(\"Preparing the recording playout :\" + result[\"id\"]);\n                                playing_video = result[\"id\"]\n                                sfutest.createAnswer({\n                                    jsep: jsep,\n                                    media: {audioSend: false, videoSend: false}, // We want recvonly audio/video\n                                    success: function (jsep) {\n                                        Janus.debug(\"Got SDP!\");\n                                        Janus.debug(jsep);\n                                        var body = {\"request\": \"start\"};\n                                        sfutest.send({\"message\": body, \"jsep\": jsep});\n                                    },\n                                    error: function (error) {\n                                        Janus.error(\"WebRTC error:\", error);\n                                        bootbox.alert(\"WebRTC error... \" + JSON.stringify(error));\n                                    }\n                                });\n                                if (result[\"warning\"])\n                                    bootbox.alert(result[\"warning\"]);\n                            }\n                            else if (event === 'recording') {\n                                // Got an ANSWER to our recording OFFER\n                                if (jsep !== null && jsep !== undefined)\n                                    sfutest.handleRemoteJsep({jsep: jsep});\n                                var id = result[\"id\"];\n                                if (id !== null && id !== undefined) {\n                                    Janus.log(\"The ID of the current recording is \" + id);\n                                    //Get the nfo id to map to the mjr file generated\n                                    nfo_id = id;\n                                    //$('.recording-loading-gif').remove();\n                                    $('#'+container).find('.blink').removeClass('hidden');\n                                    $('#'+container).find('.record-text').text('Stop Recording');\n                                    $('#'+container).find('.record').attr('disabled',false);\n                                }\n                            }\n                            else if (event === 'slow_link') {\n                                var uplink = result[\"uplink\"];\n                                if (uplink !== 0) {\n                                    // Janus detected issues when receiving our media, let's slow down\n                                    bandwidth = 128 * 1024;\n                                    sfutest.send({\n                                        'message': {\n                                            'request': 'configure',\n                                            'video-bitrate-max': bandwidth, // Reduce the bitrate\n                                            'video-keyframe-interval': 15000 // Keep the 15 seconds key frame interval\n                                        }\n                                    });\n                                }\n                            }\n                            else if (event === 'playing') {\n                                Janus.log(\"Playout has started!\");\n                            }\n                            else if (event === 'stopped') {\n                                Janus.log(\"Session has stopped!\");\n                                //$('.blink').addClass('hidden');\n                            } else if (event === 'done') {\n                                $('#video-archive-item-' + playing_video).remove();\n                                playing_video = null;\n                            }\n                        }\n                    }\n                    else {\n                        // FIXME Error?\n                        var error = msg[\"error\"];\n                        bootbox.alert(error);\n                    }\n                },\n                onlocalstream: function (stream) {\n                    Janus.debug(\" ::: Got a local stream :::\");\n                    Janus.debug(JSON.stringify(stream));\n                    //if (playing === true)\n                    //return;\n\n                    //$('#localVideo').append('<video class=\"rounded centered\" id=\"thevideo\" width=320 height=240 autoplay muted=\"muted\"/>');\n                    //attachMediaStream($('#thevideo').get(0), stream);\n\n                    //attachMediaStream($('#localVideo').find('video').get(0), stream);\n                },\n                onremotestream: function (stream) {\n                    if (playing === false)\n                        return;\n                    Janus.debug(\" ::: Got a remote stream :::\" + JSON.stringify(stream));\n                    $('.video-element-holder #' + playing_video).append('<video class=\"rounded centered\" id=\"video-archive-item-' + playing_video + '\" width=320 height=240 controls autoplay/>');\n\n                    // Show the video, hide the spinner and show the resolution when we get a playing event\n                    attachMediaStream($('#video-archive-item-' + playing_video).get(0), stream);\n\n                },\n                oncleanup: function () {\n                    Janus.log(\" ::: Got a cleanup notification :::\");\n                    var f = sfutest.getId();\n                    var filename = 'localRecording-' + f.toString();\n                    console.log('Converting file: '+filename);\n                    convertJanusVideo(filename,container);\n                },\n                detach: function() {\n                    \n                }\n            });\n        },\n        error: function (error) {\n            Janus.error(error);\n            bootbox.alert(error, function () {\n                location.reload();\n            });\n        },\n        destroyed: function () {\n            location.reload();\n        }\n    });\n}\n\nfunction createJanusLocalScreenShare() {\n    // Create another session for screen sharing(The screen takes up one user space in the room)\n    janusscreen = new Janus(\n            {\n                server: server,\n                success: function () {\n                    // Attach to video room test plugin\n                    janusscreen.attach(\n                            {\n                                plugin: \"janus.plugin.recordplay\",\n                                success: function (pluginHandle) {\n                                    $('#details').remove();\n                                    screentest = pluginHandle;\n                                    Janus.log(\"Plugin attached! (\" + screentest.getPlugin() + \", id=\" + screentest.getId() + \")\");\n                                    startRecordingLocalScreenShare();        \n                                },\n                                error: function (error) {\n                                    Janus.error(\"  -- Error attaching plugin...\", error);\n                                    bootbox.alert(\"Error attaching plugin... \" + error);\n                                },\n                                consentDialog: function (on) {\n                                    Janus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n                                },\n                                webrtcState: function (on) {\n                                    Janus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n                                },\n                                onmessage: function (msg, jsep) {\n                                    Janus.debug(\" ::: Got a message (publisher) :::\");\n                                    Janus.debug(JSON.stringify(msg));\n                                    var event = msg[\"videoroom\"];\n                                    Janus.debug(\"Event: \" + event);\n                                    if (event != undefined && event != null) {\n                                        if (event === \"joined\") {\n                                            myid = msg[\"id\"];\n                                            Janus.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n                                            if (role === \"publisher\") {\n                                                // This is our session, publish our stream\n                                                Janus.debug(\"Negotiating WebRTC stream for our screen (capture \" + capture + \")\");\n                                                screentest.createOffer(\n                                                        {\n                                                            media: {video: capture, audio: false, videoRecv: false}, // Screen sharing doesn't work with audio, and Publishers are sendonly\n                                                            success: function (jsep) {\n                                                                Janus.debug(\"Got publisher SDP!\");\n                                                                Janus.debug(jsep);\n                                                                var publish = {\"request\": \"configure\", \"audio\": true, \"video\": true};\n                                                                screentest.send({\"message\": publish, \"jsep\": jsep});\n                                                            },\n                                                            error: function (error) {\n                                                                Janus.error(\"WebRTC error:\", error);\n                                                                bootbox.alert(\"WebRTC error... \" + JSON.stringify(error));\n                                                            }\n                                                        });\n                                            } else {\n                                                // We're just watching a session, any feed to attach to?\n                                                if (msg[\"publishers\"] !== undefined && msg[\"publishers\"] !== null) {\n                                                    var list = msg[\"publishers\"];\n                                                    Janus.debug(\"Got a list of available publishers/feeds:\");\n                                                    Janus.debug(list);\n                                                    for (var f in list) {\n                                                        var id = list[f][\"id\"];\n                                                        var display = list[f][\"display\"];\n                                                        Janus.debug(\"  >> [\" + id + \"] \" + display);\n                                                        newRemoteFeed(id, display)\n                                                    }\n                                                }\n                                            }\n                                        } else if (event === \"event\") {\n                                            // Any feed to attach to?\n                                            if (role === \"listener\" && msg[\"publishers\"] !== undefined && msg[\"publishers\"] !== null) {\n                                                var list = msg[\"publishers\"];\n                                                Janus.debug(\"Got a list of available publishers/feeds:\");\n                                                Janus.debug(list);\n                                                for (var f in list) {\n                                                    var id = list[f][\"id\"];\n                                                    var display = list[f][\"display\"];\n                                                    Janus.debug(\"  >> [\" + id + \"] \" + display);\n                                                    newRemoteFeed(id, display)\n                                                }\n                                            } else if (msg[\"leaving\"] !== undefined && msg[\"leaving\"] !== null) {\n                                                // One of the publishers has gone away?\n                                                var leaving = msg[\"leaving\"];\n                                                Janus.log(\"Publisher left: \" + leaving);\n                                                if (role === \"listener\" && msg[\"leaving\"] === source) {\n                                                    bootbox.alert(\"The screen sharing session is over, the publisher left\", function () {\n                                                        window.location.reload();\n                                                    });\n                                                }\n                                            } else if (msg[\"error\"] !== undefined && msg[\"error\"] !== null) {\n                                                bootbox.alert(msg[\"error\"]);\n                                            }\n                                        }\n                                    }\n                                    if (jsep !== undefined && jsep !== null) {\n                                        Janus.debug(\"Handling SDP as well...\");\n                                        Janus.debug(jsep);\n                                        screentest.handleRemoteJsep({jsep: jsep});\n                                    }\n                                },\n                                onlocalstream: function (stream) {\n                                    Janus.debug(\" ::: Got a local stream :::\");\n                                    Janus.debug(JSON.stringify(stream));\n                                    \n                                    //janusLocalScreenStream = stream;\n                                    //startRecordingLocalScreenShare(stream);\n                                    //$('#localVideo').append('<video class=\"rounded centered\" id=\"myscreenshare\" width=\"100%\" autoplay muted=\"muted\"/>');\n                                    //attachMediaStream($('#myscreenshare').get(0), stream);\n                                },\n                                onremotestream: function (stream) {\n                                    // The publisher stream is sendonly, we don't expect anything here\n                                },\n                                oncleanup: function () {\n                                    Janus.log(\" ::: Got a cleanup notification :::\");\n                                }\n                            });\n                },\n                error: function (error) {\n                    Janus.error(error);\n                    bootbox.alert(error, function () {\n                        window.location.reload();\n                    });\n                },\n                destroyed: function () {\n                    //window.location.reload();\n                }\n            });\n}\n\nfunction startRecordingLocalScreenShare() {\n    var n = $.now();\n    recordingId = n + '-' + room_name;\n    //var f = data + '-' + recordingId;\n    var f = screentest.getId();\n    \n    screentest.createOffer({\n        // By default, it's sendrecv for audio and video..\n        success: function (jsep) {\n            Janus.debug(jsep);\n            var body = {\n                \"request\": \"record\",\n                //\"name\": 'screenshare-' + n.toString(),\n                \"name\": 'localRecording-' + f.toString(),\n                \"video\": \"hires\",\n                \"filename\": 'screenshare-' + f.toString()\n            };\n            screentest.send({\"message\": body, \"jsep\": jsep});\n\n        },\n        //stream: localStream,\n        stream: mainVideo,\n        error: function (error) {\n            screentest.hangup();\n        }\n    });\n}\n\nfunction startRecordingLocalStream() {\n   var n = $.now();\n    recordingId = n + '-' + room_name;\n    //var f = data + '-' + recordingId;\n    var f = sfutest.getId();\n    var filename = 'localRecording-' + f.toString();\n    \n    sfutest.createOffer({\n        // By default, it's sendrecv for audio and video..\n        success: function (jsep) {\n            Janus.debug(jsep);\n            var body = {\n                \"request\": \"record\",\n                \"name\": 'localRecording-' + f.toString(),\n                \"video\": \"hires\",\n                \"filename\": 'localRecording-' + f.toString()\n            };\n            sfutest.send({\"message\": body, \"jsep\": jsep});\n            \n        },\n        //stream: localStream,\n        stream: mainVideo,\n        error: function (error) {\n            sfutest.hangup();\n            $('.blink').addClass('hidden');\n        }\n    });\n}\n\nfunction saveScreenShareNfo() {\n\n    $.ajax({\n        url: public_path + 'saveScreenShareNfoJanus',\n        data: {\n            //local: data + '-' + sfutest.getId()\n            stream: screentest.getId(),\n            session: session\n        },\n        type: \"POST\",\n        beforeSend: function () {\n\n        },\n        success: function (e) {\n            console.log(e);\n            console.log('Screenshare NFO generated');\n\n        },\n        complete: function () {\n\n        },\n        error: function (xhr, status, error) {\n            console.log('Error: retrying');\n        }\n    });\n}\n\n\nfunction convertJanusVideo(filename,container) {\n    \n    var subject_name = $('#'+container).find('.panel-title').text();\n    \n    $.ajax({\n     url: public_path + 'convertDiscussionsJanusVideo',\n     data: {\n         'filename': filename,\n         'module_type': 'discussions',\n         'module_id': room_number,\n         'display_name':display_name,\n         'subject_name':subject_name,\n         'video_title':\"\"\n     },\n     type: \"POST\",\n     beforeSend: function () {\n        console.log('Sending Convertion signal');\n        $('#'+container).find('.recording-status').removeClass('hidden');\n        $('#'+container).find('.recording-status').text('Saving Video');\n        \n     },\n     success: function (e) {\n     $('#'+container).find('.recording-status').text('Video Saved. Processing Video');\n     $('#'+container).find('.progress').removeClass('hidden');\n     \n     conversionProgress = window.setTimeout(function() { \n            getConversionProgress(filename,container);\n     }, 1000);\n     \n     },\n     complete: function () {\n        console.log('Completed Conversion');\n     },\n     error: function (xhr, status, error) {\n     console.log('Error:'+error);\n     }\n     });\n    \n}\n\nvar getConversionProgress = function(filename,container) {\n    conversionAttempts++;\n    $.ajax({\n     url: public_path + 'getConversionProgress',\n     data: {\n         'filename': filename\n     },\n     type: \"POST\",\n     beforeSend: function () {\n        \n     },\n     success: function (data) {\n        console.log($('.processing-percent').val(data));    \n       $('#'+container).find('.progress-bar').css('width', data+'%').attr('aria-valuenow', data);\n       $('#'+container).find('.progress-bar').html('Processing '+data+'% Complete');\n       $('#'+container).find('.processing-percent').val(data);\n       \n       if(data == '100') {\n           $('#'+container).find('.recording-status').text('Processing Completed');\n           $('#video-archive').load($('.current-video-page').val()+' #video-archive',function(responseTxt, statusTxt, xhr) {\n               $('.video-tags').tagEditor({\n                    maxTags: 9999,\n                    clickDelete: true,\n                    placeholder: 'Enter video tags ...',\n                    autocomplete: {\n                        delay: 0, // show suggestions immediately\n                        position: {collision: 'flip'}, // automatic menu position up/down\n                        source: public_path + 'getTags/' + $(this).siblings('.recorded_video_id') + '/discussions'\n                    },\n                    onChange: function (field, editor, tags) {\n                    var ajaxurl = public_path + 'addNewTag';\n\n                    var unique_id = $(field).siblings('.recorded_video_id').val();\n                    var tag_type = 'discussions';\n                    var formData = new FormData();\n                    formData.append('unique_id', unique_id);\n                    formData.append('tag_type', tag_type);\n                    formData.append('tags', tags);\n                    $.ajax({\n                        url: ajaxurl,\n                        type: \"POST\",\n                        data: formData,\n                        // THIS MUST BE DONE FOR FILE UPLOADING\n                        contentType: false,\n                        processData: false,\n                        beforeSend: function () {\n                        },\n                        success: function (data) {\n                        },\n                        error: function (xhr, status, error) {\n\n                        }\n                }); //ajax\n            //alert(tags);\n        }\n    });\n           });\n           $('#'+container).find('.recording-status').addClass('hidden');\n           $('#'+container).find('.progress').addClass('hidden');\n           $('#'+container).find('.processing-percent').val(\"0\");\n           conversionAttempts = 0;\n       } else\n        if(conversionAttempts < 10 && data < 99) {    \n        conversionProgress = window.setTimeout(function() { \n            getConversionProgress(filename,container); \n        }, 1000);    \n       } else {\n           conversionAttempts = 0;\n           $('#'+container).find('.recording-status').addClass('hidden');\n           $('#'+container).find('.progress').addClass('hidden');\n           $('#'+container).find('.processing-percent').val(\"0\");\n           $('#video-archive').load($('.current-video-page').val()+' #video-archive',function(responseTxt, statusTxt, xhr) {\n               $('.video-tags').tagEditor({\n                    maxTags: 9999,\n                    clickDelete: true,\n                    placeholder: 'Enter video tags ...',\n                    autocomplete: {\n                        delay: 0, // show suggestions immediately\n                        position: {collision: 'flip'}, // automatic menu position up/down\n                        source: public_path + 'getTags/' + $(this).siblings('.recorded_video_id') + '/discussions'\n                    },\n                    onChange: function (field, editor, tags) {\n                    var ajaxurl = public_path + 'addNewTag';\n\n                    var unique_id = $(field).siblings('.recorded_video_id').val();\n                    var tag_type = 'discussions';\n                    var formData = new FormData();\n                    formData.append('unique_id', unique_id);\n                    formData.append('tag_type', tag_type);\n                    formData.append('tags', tags);\n                    $.ajax({\n                        url: ajaxurl,\n                        type: \"POST\",\n                        data: formData,\n                        // THIS MUST BE DONE FOR FILE UPLOADING\n                        contentType: false,\n                        processData: false,\n                        beforeSend: function () {\n                        },\n                        success: function (data) {\n                        },\n                        error: function (xhr, status, error) {\n\n                        }\n                }); //ajax\n            //alert(tags);\n        }\n    });\n           });\n       }\n     },\n     complete: function () {\n        \n     },\n     error: function (xhr, status, error) {\n        console.log('Error: retrying');\n        conversionProgress = window.setTimeout(function() { \n            getConversionProgress(filename,container); \n        }, 1000);  \n     }\n     });\n\n}\n\nfunction saveMessage(display_name,message) {\n    \n    $.ajax({\n     url: public_path + 'chat',\n     data: {\n         'display_name': display_name,\n         'module_type': 'discussions',\n         'module_id': room_number,\n         'message': message\n     },\n     type: \"POST\",\n     beforeSend: function () {\n        \n     },\n     success: function (e) {\n     console.log('Saved Message');\n   \n     },\n     complete: function () {\n        \n     },\n     error: function (xhr, status, error) {\n     }\n     });\n    \n}\n\nfunction editRecordedVideo(new_title,recorded_video_id) {\n    $.ajax({\n     url: public_path + '/editRecordedVideo/'+recorded_video_id,\n     type: \"PUT\",\n     data: {\n       'title': new_title  \n     },\n     beforeSend: function () {\n        \n     },\n     success: function (e) {\n        console.log('Title Saved');\n     },\n     complete: function () {\n        \n     },\n     error: function (xhr, status, error) {\n     }\n     });\n}\n\nfunction deleteRecordedVideo(recorded_video_id) {\n    \n    $.ajax({\n     url: public_path + '/deleteRecordedVideo/'+recorded_video_id,\n     type: \"DELETE\",\n     beforeSend: function () {\n        \n     },\n     success: function (e) {\n     console.log('Deleted Video');\n     refreshVideoArchive();\n     },\n     complete: function () {\n        \n     },\n     error: function (xhr, status, error) {\n     }\n     });\n    \n}\n\nfunction refreshVideoArchive() {\n    $('#video-archive').load($('.current-video-page').val()+' #video-archive',function(responseTxt, statusTxt, xhr){\n        $('.refresh-video-archive').text('Refresh Video Archive');\n         $('.video-tags').tagEditor({\n        maxTags: 9999,\n        clickDelete: true,\n        placeholder: 'Enter video tags ...',\n        autocomplete: {\n            delay: 0, // show suggestions immediately\n            position: {collision: 'flip'}, // automatic menu position up/down\n            source: public_path + 'getTags/' + $(this).siblings('.recorded_video_id') + '/discussions'\n        },\n        onChange: function (field, editor, tags) {\n            var ajaxurl = public_path + 'addNewTag';\n\n            var unique_id = $(field).siblings('.recorded_video_id').val();\n            var tag_type = 'discussions';\n            var formData = new FormData();\n            formData.append('unique_id', unique_id);\n            formData.append('tag_type', tag_type);\n            formData.append('tags', tags);\n            $.ajax({\n                url: ajaxurl,\n                type: \"POST\",\n                data: formData,\n                // THIS MUST BE DONE FOR FILE UPLOADING\n                contentType: false,\n                processData: false,\n                beforeSend: function () {\n                },\n                success: function (data) {\n                },\n                error: function (xhr, status, error) {\n\n                }\n            }); //ajax\n            //alert(tags);\n        }\n    });\n    });\n}\n\n\n// helper function to show the volume\nfunction showVolume(el, volume) {\n    //console.log('showVolume', volume, el);\n    if (!el) return;\n    if (volume < -75) volume = -75; // -45 to -20 is\n    if (volume > -10) volume = -10; // a good range\n    el.value = volume;\n}\n\nfunction videoTags(tag_type) {\n    //For Tags\n$('.video-tags').tagEditor({\n        maxTags: 9999,\n        clickDelete: true,\n        placeholder: 'Enter video tags ...',\n        autocomplete: {\n            delay: 0, // show suggestions immediately\n            position: {collision: 'flip'}, // automatic menu position up/down\n            source: public_path + 'getTags/' + $(this).siblings('.recorded_video_id') + '/' +tag_type\n        },\n        onChange: function (field, editor, tags) {\n            var ajaxurl = public_path + 'addNewTag';\n\n            var unique_id = $(field).siblings('.recorded_video_id').val();\n            var formData = new FormData();\n            formData.append('unique_id', unique_id);\n            formData.append('tag_type', tag_type);\n            formData.append('tags', tags);\n            $.ajax({\n                url: ajaxurl,\n                type: \"POST\",\n                data: formData,\n                // THIS MUST BE DONE FOR FILE UPLOADING\n                contentType: false,\n                processData: false,\n                beforeSend: function () {\n                },\n                success: function (data) {\n                },\n                error: function (xhr, status, error) {\n\n                }\n            }); //ajax\n            //alert(tags);\n        }\n});\n}\n\nvar chat_toggle = $('#chat-box-container').scotchPanel({\n                    startOpened: false, // Required\n                    containerSelector: '#discussions-container',\n                    direction: 'left',\n                    duration: 300,\n                    transition: 'ease',\n                    //clickSelector: '.toggle-panel-chat',\n                    distanceX: '25%',\n                    enableEscapeKey: true\n                });\n                \n/*var video_archive_toggle = $('#video-archive-container').scotchPanel({\n                    containerSelector: '#video-archive-container',\n                    direction: 'bottom',\n                    duration: 300,\n                    transition: 'ease',\n                    //clickSelector: '.toggle-video-archive',\n                    distanceX: '20%',\n                    enableEscapeKey: true\n                });                */\n\n//For Chat Toggling\n$('.toggle-panel-chat').click(function(){\n    if($(this).text() == 'Close Chat') {\n        $('#chat-box-container').addClass('is-hidden');\n        $(this).text('Open Chat');\n        $(this).append('<span class=\"badge chat-badge\">0</span>');\n        \n    } else {\n        $('#chat-box-container').removeClass('is-hidden');\n        $(this).text('Close Chat');    \n        $(this).children('.chat-badge').remove();\n    }\n    chat_toggle.toggle();\n});\n\n\n//For Video Archive Toggling\n$('.toggle-video-archive').clickToggle(function(){\n    //$('#video-archive-container').removeClass('hidden');\n    $(this).text('Close Video Archive');\n    //video_archive_toggle.toggle();\n},function(){\n    $(this).text('Open Video Archive');\n    //video_archive_toggle.toggle();\n});\n\n//For Video Archive Paginator\n$('#video-archive-container').on('click','.pager-element',function(e){\n    e.preventDefault();\n    console.log($(this).attr('href'));\n    $('.current-video-page').val($(this).attr('href'));\n    $('#video-archive').load($(this).attr('href')+' #video-archive',function(responseTxt, statusTxt, xhr){\n        videoTags(tag_type);\n    });\n});\n$('#video-archive-container').on('click','.previous',function(e){\n    e.preventDefault();\n    console.log($(this).attr('href'));\n    $('.current-video-page').val($(this).attr('href'));\n    $('#video-archive').load($(this).attr('href')+' #video-archive',function(responseTxt, statusTxt, xhr){\n        videoTags(tag_type);\n    });\n});\n$('#video-archive-container').on('click','.next',function(e){\n    e.preventDefault();\n    console.log($(this).attr('href'));\n    $('.current-video-page').val($(this).attr('href'));\n    $('#video-archive').load($(this).attr('href')+' #video-archive',function(responseTxt, statusTxt, xhr){\n        videoTags(tag_type);\n    });\n});\n\n//For Lightbox\n$(document).on('click', '[data-toggle=\"lightbox\"]', function(event) {\n    event.preventDefault();\n    $(this).ekkoLightbox({\n        alwaysShowClose: true\n    });\n});\n\n\n$('body').on('change','#video-camera-list',function(){\n     //webrtc.stopLocalVideo();\n     var selectedOption = $(this).val();\n     console.log('selectedOption: '+selectedOption);\n     console.log('Audio Changed');\n     webrtc.leaveRoom();      \n     webrtc.stopLocalVideo();\n     localStorage.setItem('video',selectedOption);\n      webrtc.config.media.video = {\n        optional: [{sourceId: selectedOption}]\n      }\n      webrtc.startLocalVideo();\n});\n\n$('body').on('change','#audio-input-list',function(){\n     //webrtc.stopLocalVideo();\n     var selectedOption = $(this).val();\n     console.log(localStorage.getItem('audio'));\n     console.log('selectedOption: '+selectedOption);\n     console.log('Audio Changed');\n     webrtc.leaveRoom();      \n     webrtc.stopLocalVideo(); \n     localStorage.setItem('audio',selectedOption);\n      webrtc.config.media.audio = {\n        optional: [{sourceId: selectedOption}]\n      }\n      webrtc.startLocalVideo();\n});\n\n\n$('body').on('click','.btn-edit-video-title',function(e){\n    e.preventDefault();\n    \n    $(this).addClass('hidden');\n    $(this).siblings('.btn-save-video-title').removeClass('hidden');\n    $(this).parent().parent().find('.edit-title').removeClass('hidden');\n    $(this).parent().parent().find('.video-label').addClass('hidden');\n    $(this).siblings('.btn-delete-video').addClass('hidden');\n});\n\n$('body').on('click','.btn-save-video-title',function(e){\n    var recorded_video_id = $(this).siblings('.recorded_video_id').val();\n    var new_title = $(this).parent().parent().find('.edit-title').val();\n    if(new_title !== \"\") {\n        $(this).parent().parent().find('.video-label').text(new_title);    \n    } else {\n        $(this).parent().parent().find('.video-label').text('No Title');    \n    }\n    \n    \n    $(this).addClass('hidden');\n    $(this).parent().parent().find('.edit-title').addClass('hidden');\n    $(this).siblings('.btn-edit-video-title').removeClass('hidden');\n    $(this).siblings('.btn-delete-video').removeClass('hidden');\n    $(this).parent().parent().find('.video-label').removeClass('hidden');\n    editRecordedVideo(new_title,recorded_video_id);\n});\n\n$('body').on('click','.btn-delete-video',function(e){\n    e.preventDefault();\n    var recorded_video_id = $(this).siblings('.recorded_video_id').val();\n    //console.log(recorded_video_id);var message_object = '<div class=\"row\"><div class=\"col-xs-6\">'+ webrtc.config.nick + '</div><div class=\"col-xs-6\"></div></div><div class=\"row\"><div class=\"col-xs-8 chat-bubble-left\">'+message+'</div></div>';\n    var button = $(this);\n    BootstrapDialog.confirm({\n            title: 'Deleting Video',\n            message: 'Are you sure?',\n            type: BootstrapDialog.TYPE_WARNING, // <-- Default value is BootstrapDialog.TYPE_PRIMARY\n            closable: true, // <-- Default value is false\n            draggable: true, // <-- Default value is false\n            btnCancelLabel: 'Cancel', // <-- Default value is 'Cancel',\n            btnOKLabel: 'Ok', // <-- Default value is 'OK',\n            btnOKClass: 'btn-warning', // <-- If you didn't specify it, dialog type will be used,\n            callback: function(result) {\n                // result will be true if button was click, while it will be false if users close the dialog directly.\n                if(result) {\n                    button.attr('disabled','true');\n                    button.text('Deleting');\n                    deleteRecordedVideo(recorded_video_id,$(this));            \n                }else {\n                    \n                }\n            }\n        });\n});\n\n$('body').on('click','.refresh-video-archive',function(e){\n   e.preventDefault();\n   refreshVideoArchive();\n   $(this).text('Refreshing');\n});\n\n$('body').on('click','.leave-discussion',function(e){\n   e.preventDefault();\n     webrtc.leaveRoom(room_name_tmp);      \n      webrtc.stopLocalVideo(); \n$(this).attr('class','btn rejoin-discussion');\n$(this).text('Rejoin Discussion');\n   \n})\n\n$('body').on('click','.rejoin-discussion',function(e){\n   e.preventDefault();\n     //webrtc.leaveRoom();      \n     webrtc.stopLocalVideo(); \n      webrtc.config.media.audio = true;\n      webrtc.config.media.video = true;\n      webrtc.startLocalVideo();\n\n$(this).attr('class','btn leave-discussion');\n$(this).text('Leave Discussion');   \n})\n\n\n\n//Initialize Video Tags\nvideoTags(tag_type);\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[{"start":{"row":744,"column":7},"end":{"row":758,"column":4},"placeholder":"..."},{"start":{"row":1554,"column":43},"end":{"row":1589,"column":4},"placeholder":"..."}],"scrolltop":28200.5,"scrollleft":0,"selection":{"start":{"row":1735,"column":53},"end":{"row":1735,"column":53},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1706,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1494930656874}