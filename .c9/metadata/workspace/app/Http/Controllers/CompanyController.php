{"changed":true,"filter":false,"title":"CompanyController.php","tooltip":"/app/Http/Controllers/CompanyController.php","value":"<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Controllers\\BaseController;\nuse App\\Models\\LinkCategory;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\Country;\nuse App\\Models\\Company;\nuse App\\Models\\CompanyDivision;\nuse App\\Models\\Ticket;\nuse App\\Models\\User;\nuse App\\Models\\Profile;\nuse App\\Models\\Role;\nuse App\\Models\\RoleUser;\nuse App\\Models\\Project;\nuse App\\Models\\Team;\nuse App\\Models\\TeamMember;\nuse App\\Models\\TeamProject;\nuse App\\Models\\TeamCompany;\nuse App\\Models\\Task;\nuse App\\Models\\TaskChecklist;\nuse App\\Models\\TaskCheckListOrder;\nuse App\\Models\\TaskCheckListPermission;\nuse App\\Models\\TestPerApplicant;\nuse App\\Models\\TestPerJob;\nuse App\\Models\\Job;\nuse App\\Models\\ShareJob;\nuse App\\Models\\ShareJobCompany;\nuse App\\Models\\ShareJobCompanyPermission;\nuse App\\Models\\Test;\nuse App\\Models\\Module;\nuse App\\Models\\Permission;\nuse App\\Models\\PermissionUser;\nuse App\\Models\\PermissionRole;\nuse App\\Models\\Applicant;\nuse App\\Models\\Comment;\nuse App\\Models\\Link;\nuse Auth;\nuse View;\nuse Redirect;\nuse Validator;\nuse DB;\nuse Input;\n\nclass CompanyController extends BaseController {\n\n    public function index(Request $request) {\n\n        $user_id = Auth::user()->user_id;\n\n        $countries_option = Country::orderBy('country_name', 'asc')->get();\n\n        $companies = Company::all();\n\n        $profiles = Profile::all();\n\n        $projects = Project::where('user_id', $user_id)->get();\n\n        $assets = ['table', 'companies'];\n\n        return View::make('company.index', [\n                    'projects' => $projects,\n                    'profiles' => $profiles,\n                    'companies' => $companies,\n                    'countries' => $countries_option,\n                    'assets' => $assets\n        ]);\n    }\n\n    public function show($company_id) {\n\n        $projects = Project::where('company_id',$company_id)->orderBy('created_at', 'desc')->take(10)->get();\n\n        $jobs = Job::where('company_id',$company_id)->orderBy('created_at', 'desc')->take(10)->get();\n        \n        $employees = Profile::with('user')->where('company_id',$company_id)->take(10)->get();\n        \n        $job_list = Job::where('company_id',$company_id)->lists('id');\n        \n        $applicants = Applicant::whereIn('job_id',$job_list)->orderBy('created_at','desc')->take(10)->get();\n        \n        $applicant_list = Applicant::whereIn('job_id',$job_list)->lists('id');\n        \n        $comments = Comment::with('applicant')->whereIn('unique_id',$applicant_list)\n                ->where('belongs_to','applicant')\n                ->orderBy('created_at','desc')\n                ->take(10)\n                ->get();\n\n        $links = Link::where('company_id',$company_id)\n                ->orderBy('created_at','desc')\n                ->take(10)->get();\n\n        $briefcases = Task::select(\n                    'task.*','project.company_id'\n                )\n                ->leftJoin('project', 'task.project_id', '=', 'project.project_id')\n                ->where('project.company_id',$company_id)\n                ->orderBy('created_at','desc')\n                ->take(10)->get();\n\n        $items = TaskChecklist::select(\n                    'task_check_list.*'\n                )\n                ->leftJoin('task', 'task_check_list.task_id', '=', 'task.task_id')\n                ->leftJoin('project', 'task.project_id', '=', 'project.project_id')\n                ->where('project.company_id',$company_id)\n                ->orderBy('created_at','desc')\n                ->take(10)->get();\n\n        $assets = ['companies', 'real-time'];\n\n        return View::make('company.show', [\n                    'projects' => $projects,\n                    'jobs' => $jobs,\n                    'employees' => $employees,\n                    'applicants' => $applicants,\n                    'comments' => $comments,\n                    'links' => $links,\n                    'briefcases' => $briefcases,\n                    'items' => $items,\n                    'assets' => $assets\n        ]);\n    }\n\n    public function getCompanyModules($company_id) {\n\n        //Getting Assign Project Data\n        $user_id = Auth::user('user')->user_id;\n\n        $countries_option = Country::orderBy('country_name', 'asc')->get();\n\n        $companies = Company::where('id', $company_id)->get();\n\n        $teams = Team::with(['team_member' => function($query) use($company_id) {\n                        $query->with('user')->where('company_id', $company_id)->get();\n                    }])->get();\n\n        $team_grouping = Project::with('team_project')->where('company_id', $company_id)->get();\n\n        $profiles = Profile::where('company_id', $company_id)->get();\n\n        $project_id_list = [];\n\n        $company_id_list = [];\n\n        //Add the current company to the company_id_list by default\n        array_push($company_id_list, $company_id);\n\n        //Get owned projects\n        $owned_projects = Project::where('user_id', $user_id)->where('company_id', $company_id)->get();\n\n        //Get Team Member projects\n        $team_members = TeamMember::where('user_id', $user_id)->where('company_id', $company_id)->get();\n\n        $team_projects = TeamProject::all();\n\n        foreach ($owned_projects as $owned_project) {\n            array_push($project_id_list, $owned_project->project_id);\n        }\n\n        //Use the team id to get the projects the users are involved with\n        foreach ($team_members as $member) {\n            foreach ($team_projects as $project) {\n                if ($member->team_id === $project->team_id) {\n                    array_push($project_id_list, $project->project_id);\n                }\n            }\n        }\n\n        //Get projects with their tasks and task permissions\n        $projects = Project::with(['task' => function($query) {\n                        $query->orderBy('task_title', 'asc')->get();\n                    }], 'task_permission', 'company', 'user')\n                ->whereIn('project_id', $project_id_list)\n                ->where('company_id', $company_id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        $shared_projects = Project::with(['task' => function($query) {\n                        $query->orderBy('task_title', 'asc')->get();\n                    }], 'task_permission', 'company', 'user')\n                ->whereIn('project_id', $project_id_list)\n                ->get();\n\n        $task_permissions = TaskCheckListPermission::where('user_id', $user_id)->get();\n\n        $user_profile_role = Profile::where('user_id', $user_id)\n                ->where('company_id', $company_id)\n                ->first();\n\n        $permissions_list = [];\n\n        $permissions_user = PermissionUser::with('permission')\n                ->where('company_id', $company_id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        foreach ($permissions_user as $role) {\n            array_push($permissions_list, $role->permission_id);\n        }\n\n        $module_permissions = Permission::whereIn('id', $permissions_list)->get();\n\n        $assets = ['companies', 'real-time'];\n\n        return View::make('company.show', [\n                    'company_id' => $company_id,\n                    'projects' => $projects,\n                    'shared_projects' => $shared_projects,\n                    'task_permissions' => $task_permissions,\n                    'profiles' => $profiles,\n                    'companies' => $companies,\n                    'teams' => $teams,\n                    'team_grouping' => $team_grouping,\n                    'countries' => $countries_option,\n                    'module_permissions' => $module_permissions,\n                    'assets' => $assets\n        ]);\n    }\n\n    public function create() {\n        return View::make('company.create');\n    }\n\n    public function edit($company_id) {\n        $companies = Company::find($company_id);\n\n        $countries_option = Country::orderBy('country_name', 'asc')\n                ->lists('country_name', 'country_id')\n                ->toArray();\n\n        return View::make('company.edit', [\n                    'companies' => $companies,\n                    'countries' => $countries_option\n        ]);\n    }\n\n    public function store(Request $request) {\n\n        $user_id = Auth::user('user')->user_id;\n\n        $validation = Validator::make(Input::all(), [\n                    'name' => 'required|unique:companies',\n                    'email' => 'required|email',\n                    'country_id' => 'required'\n        ]);\n\n        if ($validation->fails()) {\n            return Redirect::back()->withInput()->withErrors($validation->messages());\n        }\n\n        //Save Company\n        $companies = new Company;\n        $companies->name = $request->input('name');\n        $companies->email = $request->input('email');\n        $companies->phone = $request->input('phone');\n        $companies->number_of_employees = $request->input('number_of_employees');\n        $companies->address_1 = $request->input('address_1');\n        $companies->address_2 = $request->input('address_2');\n        $companies->province = $request->input('province');\n        $companies->zipcode = $request->input('zipcode');\n        $companies->website = $request->input('website');\n        $companies->country_id = $request->input('country_id');\n        $companies->save();\n\n        //Check if Company Division Exists\n        /* $company_division_trim = trim($request->input('company_division'));\n          $company_division_exists = CompanyDivision::where('division_name', $company_division_trim)->count();\n\n          if ($company_division_exists > 0) {\n          //Get Existing Company Division\n          $company_divisions = CompanyDivision::where('division_name', $company_division_trim)->first();\n          } else {\n          //Save Company Division\n          $company_divisions = new CompanyDivision();\n          $company_divisions->company_id = $companies->id;\n          $company_divisions->division_name = $company_division_trim;\n          $company_divisions->save();\n          } */\n\n        //Check if Role already exists with the same company\n        $role_exists = Role::where('name', 'Admin')->where('company_id', $companies->id)->count();\n\n        if ($role_exists > 0) {\n\n            $role = Role::where('name', 'Admin')->where('company_id', $companies->id)->first();\n        } else {\n            //Save this user's role as a super user of this company\n            $admin = new Role();\n            $admin->company_id = $companies->id;\n            $admin->company_division_id = 0;\n            $admin->name = 'Admin';\n            $admin->slug = 'admin-' . $companies->id;\n            $admin->description = 'Administrator';\n            $admin->level = '1';\n            $admin->save();\n\n            $staff = new Role();\n            $staff->company_id = $companies->id;\n            $staff->company_division_id = 0;\n            $staff->name = 'Staff';\n            $staff->slug = 'staff-' . $companies->id;\n            $staff->description = 'Staff';\n            $staff->level = '2';\n            $staff->save();\n\n            $client = new Role();\n            $client->company_id = $companies->id;\n            $client->company_division_id = 0;\n            $client->name = 'Client';\n            $client->slug = 'client-' . $companies->id;\n            $client->description = 'Client';\n            $client->level = '3';\n            $client->save();\n        }\n\n        //Map the company to the user's profile\n        $profile = new Profile();\n        $profile->user_id = $user_id;\n        $profile->company_id = $companies->id;\n        $profile->role_id = $admin->id;\n        $profile->save();\n\n        $user = User::where('user_id', $user_id)->first();\n\n\n        $new_user_role = Role::where('company_id', 0)->first();\n\n        $user->detachRole($new_user_role->id);\n        $user->attachRole($admin->id);\n\n        $no_company_profile = Profile::where('company_id', 0)->where('user_id', $user_id);\n        $no_company_profile->delete();\n\n        return Redirect::to('company/' . $companies->id)->withSuccess(\"Company added successfully!!\");\n    }\n\n    public function update($company_id) {\n        $companies = Company::find($company_id);\n\n        $validation = Validator::make(Input::all(), [\n                    'company_name' => 'required|unique:companies,company_name,' . $company_id . ',company_id',\n                    'contact_person' => 'required',\n                    'email' => 'required|email',\n                    'zipcode' => 'numeric',\n                    'country_id' => 'required'\n        ]);\n\n        if ($validation->fails()) {\n            return Redirect::to('client')->withErrors($validation->messages());\n        }\n        $data = Input::all();\n        $companies->fill($data);\n        $companies->save();\n        return Redirect::to('client')->withSuccess(\"Company updated successfully!!\");\n    }\n\n    public function delete() {\n        \n    }\n\n    public function destroy($company_id) {\n        $company = Company::find($company_id);\n\n        if (!$company || !parent::hasRole('Admin'))\n            return Redirect::to('company')->withErrors('This is not a valid link!!');\n\n        $user = User::find($company_id);\n\n        $project = Project::where('company_id', '=', $company->id)->get();\n\n        if (count($project)) {\n            return Redirect::to('company')->withErrors('This client has some projects!! Delete that project first!!');\n        }\n\n        $ticket = Ticket::where('user_id', $user->id)->get();\n\n        if (count($ticket))\n            return Redirect::to('client')->withErrors('This client has some ticket!! Delete that ticket first!!');\n\n        DB::table('message')\n                ->where('from_user_id', '=', $user->id)\n                ->orWhere('to_user_id', '=', $user->id)\n                ->delete();\n\n        DB::table('events')\n                ->where('user_id', '=', $user->id)\n                ->delete();\n\n        $user->delete();\n\n        $company->delete();\n\n        return Redirect::to('client')->withSuccess('Company deleted successfully!!');\n    }\n\n    //Create a team for a project,     \n    public function createTeam(Request $request) {\n\n        //Create a new team if that project isn't mapped to a team yet\n        $team = new Team();\n        $team_member = new TeamMember();\n        $team_project = new TeamProject();\n\n        $user_id = $request->input('user_id');\n        $project_id = $request->input('project_id');\n        $company_id = $request->input('company_id');\n\n        $project_exists = Team::where('project_id', $project_id)->count();\n\n        if ($project_exists > 0) {\n\n            $team_id = Team::where('project_id', $project_id)->pluck('id');\n\n            $team_member_exists = TeamMember::where('user_id', $user_id)->where('team_id', $team_id)->where('company_id', $company_id)->first();\n\n            $team_project_exists = TeamProject::where('team_id', $team_id)->where('team_id', $team_id)->first();\n\n            if (!$team_member_exists > 0) {\n                $team_member->team_id = $team_id;\n                $team_member->user_id = $user_id;\n                $team_member->company_id = $company_id;\n                $team_member->save();\n            }\n\n            if (!$team_project_exists > 0) {\n\n                $team_project->team_id = $team_id;\n                $team_project->project_id = $project_id;\n\n                $team_project->save();\n            }\n        } else {\n\n            //Save the project id as an new team\n            $team->project_id = $project_id;\n            $team->save();\n\n            //Get the team id\n            $team_id = $team->id;\n\n            //Save the user as a team member\n            $team_member->team_id = $team_id;\n            $team_member->user_id = $user_id;\n            $team_member->company_id = $company_id;\n            $team_member->save();\n\n            //Map Project to the team id    \n            $team_project->team_id = $team_id;\n            $team_project->project_id = $project_id;\n\n            $team_project->save();\n        }\n\n        //Get projects with their tasks and task permissions\n        $tasks = Task::where('project_id', $project_id)\n                ->orderBy('task_title', 'asc')\n                ->get();\n        $task_permissions = TaskCheckListPermission::where('project_id', $project_id)->where('user_id', $user_id)->get();\n\n        return view('company.partials._tasklist', [\n            'tasks' => $tasks,\n            'task_permissions' => $task_permissions,\n            'project_id' => $project_id,\n            'user_id' => $user_id,\n            'company_id' => $company_id\n        ]);\n    }\n\n    public function unassignTeamMember(Request $request) {\n\n        $user_id = $request->input('user_id');\n        $team_id = $request->input('team_id');\n        $project_id = $request->input('project_id');\n\n        //Delete team member from the Team Member table to unassign them from the project\n        $team_member = TeamMember::where('user_id', $user_id)->where('team_id', $team_id);\n        $team_member->delete();\n\n        //Delete permissions from tasklists\n        $permissions = TaskCheckListPermission::where('user_id', $user_id)->where('project_id', $project_id);\n        $permissions->delete();\n        return $user_id;\n    }\n\n    public function assignCompanyToTeam(Request $request) {\n\n        $project_id = $request->input('project_id');\n        $company_id = $request->input('company_id');\n\n        $team_company = new TeamCompany();\n        $team_company->project_id = $project_id;\n        $team_company->company_id = $company_id;\n        $team_company->save();\n\n        //Get employees of the company except for the logged in user\n        $employees = Profile::with('user')\n                ->where('company_id', $company_id)\n                ->get();\n\n        return view('company.partials._projectemployeelist', [\n            'employees' => $employees,\n            'project_id' => $project_id,\n            'company_id' => $company_id\n        ]);\n    }\n\n    public function unassignCompanyFromTeam(Request $request) {\n        $project_id = $request->input('project_id');\n        $company_id = $request->input('company_id');\n\n        $team_company = TeamCompany::where('project_id', $project_id)->where('company_id', $company_id);\n        $team_company->delete();\n\n        $team_project = TeamProject::where('project_id', $project_id)->first();\n\n        //Remove company users from team\n        $team_member = TeamMember::where('team_id', $team_project->team_id)->where('company_id', $company_id);\n        $team_member->delete();\n\n        //Remove the task check list permissions for for users on the unassigned companies\n        $task_check_list_permissions = TaskCheckListPermission::where('company_id', $company_id)->where('project_id', $project_id);\n        $task_check_list_permissions->delete();\n\n        return \"true\";\n    }\n\n    public function assignTaskList(Request $request) {\n        $user_id = $request->input('user_id');\n        $task_id = $request->input('task_id');\n        $project_id = $request->input('project_id');\n        $company_id = $request->input('company_id');\n\n        $task_list_permission = new TaskCheckListPermission();\n\n        $task_list_permission->user_id = $user_id;\n        $task_list_permission->task_id = $task_id;\n        $task_list_permission->project_id = $project_id;\n        $task_list_permission->company_id = $company_id;\n        $task_list_permission->save();\n\n        //Get Project Team\n        $team_project = TeamProject::where('project_id', $project_id)->first();\n\n        //Check if the user is already a team member for that project\n        $is_team_member = TeamMember::where('user_id', $user_id)\n                ->where('company_id', $company_id)\n                ->where('team_id', $team_project->team_id)\n                ->count();\n\n        if ($is_team_member === 0) {\n\n            $team_member = new TeamMember();\n            $team_member->user_id = $user_id;\n            $team_member->team_id = $team_project->team_id;\n            $team_member->company_id = $company_id;\n            $team_member->save();\n        }\n\n        return $user_id;\n    }\n\n    public function unassignTaskList(Request $request) {\n        $user_id = $request->input('user_id');\n        $task_id = $request->input('task_id');\n        $project_id = $request->input('project_id');\n        $company_id = $request->input('company_id');\n\n        $task_list_permission = TaskCheckListPermission::where('user_id', $user_id)\n                ->where('task_id', $task_id)\n                ->where('project_id', $project_id)\n                ->where('company_id', $company_id);\n        $task_list_permission->delete();\n\n        //Check if user still has tasks in this project\n        $has_tasks = TaskCheckListPermission::where('user_id', $user_id)->where('project_id', $project_id)->count();\n        if ($has_tasks === 0) {\n            $team_member = TeamMember::where('user_id', $user_id)->where('company_id', $company_id);\n            $team_member->delete();\n        }\n\n        return $user_id;\n    }\n\n    public function assignTestToApplicant(Request $request) {\n        $test_id = $request->input('test_id');\n        $applicant_id = $request->input('applicant_id');\n\n        $test_per_applicant = new TestPerApplicant();\n        $test_per_applicant->test_id = $test_id;\n        $test_per_applicant->applicant_id = $applicant_id;\n        $test_per_applicant->save();\n\n        return $applicant_id;\n    }\n\n    public function unassignTestFromApplicant(Request $request) {\n        $test_id = $request->input('test_id');\n        $applicant_id = $request->input('applicant_id');\n\n        $test_per_applicant = TestPerApplicant::where('test_id', $test_id)->where('applicant_id', $applicant_id);\n        $test_per_applicant->delete();\n\n        return $test_id;\n    }\n\n    public function assignTestToJob(Request $request) {\n        $test_id = $request->input('test_id');\n        $job_id = $request->input('job_id');\n\n        $test_per_job = new TestPerJob();\n        $test_per_job->test_id = $test_id;\n        $test_per_job->job_id = $job_id;\n        $test_per_job->save();\n\n        return $job_id;\n    }\n\n    public function unassignTestFromJob(Request $request) {\n        $test_id = $request->input('test_id');\n        $job_id = $request->input('job_id');\n\n        $test_per_job = TestPerJob::where('test_id', $test_id)->where('job_id', $job_id);\n        $test_per_job->delete();\n\n        return $test_id;\n    }\n\n    public function updateRole(Request $request) {\n        $user_id = $request->input('user_id');\n        $role_id = $request->input('role_id');\n        $company_id = $request->input('company_id');\n\n        $update_profile = Profile::where('user_id', $user_id)->where('company_id', $company_id);\n        $update_profile->update([\n            'role_id' => $role_id\n        ]);\n\n        $update_role = RoleUser::where('user_id', $user_id);\n        $update_role->update([\n            'role_id' => $role_id\n        ]);\n\n        return \"true\";\n    }\n\n    public function getChartData(Request $request, $id) {\n\n        $company_users = Profile::with('user')->where('company_id', $id)->get();\n\n        $authority_levels = Role::where('company_id', $id)->get();\n\n        $chart_data = [];\n        $count = 0;\n\n        foreach ($authority_levels->where('level', 1) as $key => $level) {\n            foreach ($company_users as $profile) {\n                if ($profile->role_id === $level->id) {\n                    $chart_data['name'][] = $profile->user->name;\n                    $chart_data['title'][] = $level->name;\n                    $chart_data['relationship'][] = 011;\n                }\n            }\n        }\n\n        foreach ($authority_levels->where('level', 2) as $level2) {\n            foreach ($company_users as $profile) {\n                if ($profile->role_id === $level2->level) {\n                    $chart_data['children'][] = array(\n                        'name' => $profile->user->name,\n                        'title' => $level2->name,\n                    );\n                }\n            }\n        }\n\n\n        return $chart_data;\n    }\n\n    public function getCompanyProjects(Request $request, $id) {\n\n        $projects = Project::where('company_id', $id)->get();\n\n        $project_array = [];\n\n        foreach ($projects as $project) {\n            array_push($project_array, $project->project_id);\n        }\n\n        return $project_array;\n    }\n\n    /* For Load on Demand Tabs */\n\n    public function getJobsTab(Request $request, $id) {\n\n        $user_id = Auth::user('user')->user_id;\n\n        $my_jobs = Job::where('company_id', $id)->where('user_id', $user_id)->get();\n\n        $shared_jobs_user = ShareJob::where('user_id', $user_id)->get();\n        $shared_jobs_company = ShareJobCompany::where('company_id', $id)->get();\n\n\n        $shared_jobs_list = [];\n\n        foreach ($shared_jobs_user as $user_job) {\n            array_push($shared_jobs_list, $user_job->job_id);\n        }\n\n        foreach ($shared_jobs_company as $company_job) {\n            array_push($shared_jobs_list, $company_job->job_id);\n        }\n\n        $shared_jobs = Job::with('user')->whereIn('id', $shared_jobs_list)\n                //->where('company_id','<>',$id)\n                //->where('user_id','<>',$user_id)\n                ->get();\n\n        $user_profile_role = Profile::where('user_id', $user_id)\n                ->where('company_id', $id)\n                ->first();\n\n        $permissions_list = [];\n\n        $permissions_user = PermissionUser::with('permission')\n                ->where('company_id', $id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        foreach ($permissions_user as $role) {\n            array_push($permissions_list, $role->permission_id);\n        }\n\n        $module_permissions = Permission::whereIn('id', $permissions_list)->get();\n\n        return view('company.partials._myjobslist', [\n            'my_jobs' => $my_jobs,\n            'shared_jobs' => $shared_jobs,\n            'module_permissions' => $module_permissions,\n            'company_id' => $id\n        ]);\n    }\n\n    public function getEmployeesTab(Request $request, $id) {\n\n        $user_id = Auth::user('user')->user_id;\n\n        $profiles = Profile::where('company_id', $id)->get();\n\n        $countries_option = Country::orderBy('country_name', 'asc')->get();\n\n        $user_profile_role = Profile::where('user_id', $user_id)\n                ->where('company_id', $id)\n                ->first();\n\n        $permissions_list = [];\n\n        $permissions_user = PermissionUser::with('permission')\n                ->where('company_id', $id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        foreach ($permissions_user as $role) {\n            array_push($permissions_list, $role->permission_id);\n        }\n\n        $module_permissions = Permission::whereIn('id', $permissions_list)->get();\n\n\n        return view('company.partials._employees', [\n            'profiles' => $profiles,\n            'countries' => $countries_option,\n            'module_permissions' => $module_permissions,\n            'company_id' => $id\n        ]);\n    }\n\n    public function getPositionsTab(Request $request, $id) {\n        $user_id = Auth::user('user')->user_id;\n\n        $positions = Role::where('company_id', $id)->get();\n        $modules = Module::all();\n        $permissions = Permission::all();\n        $permission_role = PermissionRole::all();\n\n        $permissions_list = [];\n\n        $permissions_user = PermissionUser::with('permission')\n                ->where('company_id', $id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        foreach ($permissions_user as $role) {\n            array_push($permissions_list, $role->permission_id);\n        }\n\n        $module_permissions = Permission::whereIn('id', $permissions_list)->get();\n\n        return view('company.partials._positionslist', [\n            'positions' => $positions,\n            'permissions' => $permissions,\n            'permission_role' => $permission_role,\n            'modules' => $modules,\n            'module_permissions' => $module_permissions,\n            'company_id' => $id\n        ]);\n    }\n\n    public function getAssignTab(Request $request, $id) {\n\n        //Getting Assign Project Data\n        $user_id = Auth::user('user')->user_id;\n\n        $countries_option = Country::orderBy('country_name', 'asc')->get();\n\n        $team_grouping = Project::with('team_project')->where('company_id', $id)->get();\n\n        $profiles = Profile::where('company_id', $id)->get();\n\n        $project_id_list = [];\n\n        //Get owned projects\n        $owned_projects = Project::where('user_id', $user_id)->where('company_id', $id)->get();\n\n        $teams = Team::with(['team_member' => function($query) use($id) {\n                        $query->with('user')->where('company_id', $id)->get();\n                    }])->get();\n\n        //Get Team Member projects\n        $team_members = TeamMember::where('user_id', $user_id)->where('company_id', $id)->get();\n\n        $team_projects = TeamProject::all();\n\n        $team_companies = TeamCompany::where('company_id', '<>', $id)->get();\n\n        foreach ($owned_projects as $owned_project) {\n            array_push($project_id_list, $owned_project->project_id);\n        }\n\n        //Use the team id to get the projects the users are involved with\n        foreach ($team_members as $member) {\n            foreach ($team_projects as $project) {\n                if ($member->team_id === $project->team_id) {\n                    array_push($project_id_list, $project->project_id);\n                }\n            }\n        }\n\n        //Get projects with their tasks and task permissions\n        $projects = Project::with(['task' => function($query) {\n                        $query->orderBy('task_title', 'asc')->get();\n                    }], 'task_permission', 'company', 'user')\n                ->whereIn('project_id', $project_id_list)\n                ->where('company_id', $id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        $shared_projects = Project::with(['task' => function($query) {\n                        $query->orderBy('task_title', 'asc')->get();\n                    }], 'task_permission', 'company', 'user')\n                ->whereIn('project_id', $project_id_list)\n                ->get();\n\n\n        $user_companies = Company::with(['profile' => function($query) use($user_id) {\n                        $query->where('user_id', $user_id)->get();\n                    }])->where('id', '<>', $id)->where('id', '<>', 0)->get();\n\n        $user_profile_role = Profile::where('user_id', $user_id)\n                ->where('company_id', $id)\n                ->first();\n\n        $permissions_list = [];\n\n        $permissions_user = PermissionUser::with('permission')\n                ->where('company_id', $id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        foreach ($permissions_user as $role) {\n            array_push($permissions_list, $role->permission_id);\n        }\n\n        $module_permissions = Permission::whereIn('id', $permissions_list)->get();\n\n\n        return view('company.partials._assign', [\n            'company_id' => $id,\n            'projects' => $projects,\n            'shared_projects' => $shared_projects,\n            'profiles' => $profiles,\n            'user_companies' => $user_companies,\n            'teams' => $teams,\n            'team_members' => $team_members,\n            'team_grouping' => $team_grouping,\n            'team_companies' => $team_companies,\n            'countries' => $countries_option,\n            'module_permissions' => $module_permissions\n        ]);\n    }\n\n    public function getAssignProjectsTab(Request $request, $id) {\n\n        //Getting Assign Project Data\n        $user_id = Auth::user('user')->user_id;\n\n        $countries_option = Country::orderBy('country_name', 'asc')->get();\n\n        $team_grouping = Project::with('team_project')->where('company_id', $id)->get();\n\n        $profiles = Profile::where('company_id', $id)->get();\n\n        $project_id_list = [];\n\n        //Get owned projects\n        $owned_projects = Project::where('user_id', $user_id)->where('company_id', $id)->get();\n\n        $teams = Team::with(['team_member' => function($query) use($id) {\n                        $query->with('user')->where('company_id', $id)->get();\n                    }])->get();\n\n        //Get Team Member projects\n        $team_members = TeamMember::where('user_id', $user_id)->where('company_id', $id)->get();\n\n        $team_projects = TeamProject::all();\n\n        $team_companies = TeamCompany::where('company_id', '<>', $id)->get();\n\n        foreach ($owned_projects as $owned_project) {\n            array_push($project_id_list, $owned_project->project_id);\n        }\n\n        //Use the team id to get the projects the users are involved with\n        foreach ($team_members as $member) {\n            foreach ($team_projects as $project) {\n                if ($member->team_id === $project->team_id) {\n                    array_push($project_id_list, $project->project_id);\n                }\n            }\n        }\n\n        //Get projects with their tasks and task permissions\n        $projects = Project::with(['task' => function($query) {\n                        $query->orderBy('task_title', 'asc')->get();\n                    }], 'task_permission', 'company', 'user')\n                ->whereIn('project_id', $project_id_list)\n                ->where('company_id', $id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        $shared_projects = Project::with(['task' => function($query) {\n                        $query->orderBy('task_title', 'asc')->get();\n                    }], 'task_permission', 'company', 'user')\n                ->whereIn('project_id', $project_id_list)\n                ->get();\n\n\n        $user_companies = Company::with(['profile' => function($query) use($user_id) {\n                        $query->where('user_id', $user_id)->get();\n                    }])->where('id', '<>', $id)->where('id', '<>', 0)->get();\n\n\n        $user_profile_role = Profile::where('user_id', $user_id)\n                ->where('company_id', $id)\n                ->first();\n\n        $permissions_list = [];\n\n        $permissions_user = PermissionUser::with('permission')\n                ->where('company_id', $id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        foreach ($permissions_user as $role) {\n            array_push($permissions_list, $role->permission_id);\n        }\n\n        $module_permissions = Permission::whereIn('id', $permissions_list)->get();\n\n        return view('company.partials._projectlist', [\n            'company_id' => $id,\n            'projects' => $projects,\n            'shared_projects' => $shared_projects,\n            'profiles' => $profiles,\n            'user_companies' => $user_companies,\n            'teams' => $teams,\n            'team_members' => $team_members,\n            'team_grouping' => $team_grouping,\n            'team_companies' => $team_companies,\n            'countries' => $countries_option,\n            'module_permissions' => $module_permissions\n        ]);\n    }\n\n    public function getAssignTestsTab(Request $request, $id) {\n\n        //Getting Assign Project Data\n        $user_id = Auth::user('user')->user_id;\n\n        //Get Jobs by company and user\n        $jobs = Job::with('applicants')->where('user_id', $user_id)->where('company_id', $id)->get();\n\n        $test_applicants = TestPerApplicant::all();\n\n        $test_jobs = TestPerJob::all();\n\n        $company_users = Profile::with('user')->where('company_id', $id)->get();\n\n        $company_user_ids = [];\n\n        //Get all tests by users within the company\n        foreach ($company_users as $company_user) {\n            array_push($company_user_ids, $company_user->user_id);\n        }\n\n        $tests = Test::whereIn('user_id', $company_user_ids)->get();\n\n        $authority_levels = Role::where('company_id', $id)->orderBy('level', 'asc')->get();\n\n        $task_permissions = TaskCheckListPermission::where('user_id', $user_id)->get();\n\n        return view('company.partials._joblist', [\n            'jobs' => $jobs,\n            'tests' => $tests,\n            'test_applicants' => $test_applicants,\n            'test_jobs' => $test_jobs\n        ]);\n    }\n\n    public function getAssignAuthorityLevelsTab(Request $request, $id) {\n        $profiles = Profile::where('company_id', $id)->get();\n\n        $company_users = Profile::with('user')->where('company_id', $id)->get();\n\n        $authority_levels = Role::where('company_id', $id)->orderBy('level', 'asc')->get();\n\n        return view('company.partials._rolelist', [\n            'profiles' => $profiles,\n            'company_users' => $company_users,\n            'authority_levels' => $authority_levels\n        ]);\n    }\n\n    public function getShareJobsTab(Request $request, $id) {\n\n        $user_id = Auth::user('user')->user_id;\n\n        $profiles = Profile::with('user')->where('company_id', $id)->where('user_id', '<>', $user_id)->get();\n\n        /* $user_companies = Company::with(['profile' => function($query) use($user_id) {\n          $query->where('user_id', $user_id)->get();\n          }])->where('id','<>',$id)->get(); */\n\n        $user_companies = Company::with('profile')->where('id', '<>', $id)->where('id', '<>', 0)->get();\n\n        $jobs = Job::where('user_id', $user_id)->where('company_id', $id)->get();\n\n        $shared_jobs = ShareJob::all();\n\n        $shared_jobs_companies = ShareJobCompany::all();\n\n        //Get company permissions\n        //$shared_company_jobs_permissions = ShareJobCompanyPermission::with('jobs')->where('company_id',$id)->get();\n        $shared_company_jobs_permissions = ShareJobCompanyPermission::with('jobs')->where('company_id', $id)->get();\n\n        return view('company.partials._sharejobslist', [\n            'profiles' => $profiles,\n            'jobs' => $jobs,\n            'user_companies' => $user_companies,\n            'shared_jobs' => $shared_jobs,\n            'shared_jobs_companies' => $shared_jobs_companies,\n            'shared_company_jobs_permissions' => $shared_company_jobs_permissions\n        ]);\n    }\n\n    public function shareJobToUser(Request $request) {\n\n        $job_id = $request->input('job_id');\n        $user_id = $request->input('user_id');\n\n        $share_jobs = new ShareJob();\n        $share_jobs->user_id = $user_id;\n        $share_jobs->job_id = $job_id;\n        $share_jobs->save();\n\n        return \"true\";\n    }\n\n    public function unshareJobFromUser(Request $request) {\n\n        $job_id = $request->input('job_id');\n        $user_id = $request->input('user_id');\n\n        $share_jobs = ShareJob::where('job_id', $job_id)->where('user_id', $user_id);\n        $share_jobs->delete();\n\n        return \"true\";\n    }\n\n    public function shareJobToCompany(Request $request) {\n        $job_id = $request->input('job_id');\n        $company_id = $request->input('company_id');\n\n        $shared_jobs_companies = new ShareJobCompany();\n        $shared_jobs_companies->job_id = $job_id;\n        $shared_jobs_companies->company_id = $company_id;\n        $shared_jobs_companies->save();\n\n        return $shared_jobs_companies->id;\n    }\n\n    public function unshareJobFromCompany(Request $request) {\n\n        $job_id = $request->input('job_id');\n        $company_id = $request->input('company_id');\n\n        $share_jobs_company = ShareJobCompany::where('job_id', $job_id)->where('company_id', $company_id);\n        $share_jobs_company->delete();\n\n        return \"true\";\n    }\n\n    public function getSubprojects(Request $request, $project_id, $company_id) {\n\n        //Getting Assign Project Data\n        $user_id = Auth::user('user')->user_id;\n\n        $is_project_owner = Project::where('project_id', $project_id)\n                ->where('user_id', $user_id)\n                ->where('company_id', $company_id)\n                ->count();\n\n        $project = Project::where('project_id', $project_id)->first();\n        $project_owner = $project->user_id;\n        $project_company = $project->company_id;\n\n        //Check if the user is the owner of the project and that user owns it in this company\n        if ($is_project_owner > 0) {\n\n            $tasks = Task::where('project_id', $project_id)->orderBy('task_title', 'asc')->get();\n        } else {\n\n            //Get task permissions first for logged in user and current company selected\n            $task_permissions = TaskCheckListPermission::where('user_id', $user_id)\n                    ->where('project_id', $project_id)\n                    ->where('company_id', $company_id)\n                    ->get();\n\n            $task_ids = [];\n\n            foreach ($task_permissions as $permission) {\n                array_push($task_ids, $permission->task_id);\n            }\n\n            $tasks = Task::whereIn('task_id', $task_ids)->orderBy('task_title', 'asc')->get();\n        }\n\n        $user_profile_role = Profile::where('user_id', $user_id)\n                ->where('company_id', $company_id)\n                ->first();\n\n        $permissions_list = [];\n\n        $permissions_user = PermissionUser::with('permission')\n                ->where('company_id', $company_id)\n                ->where('user_id', $user_id)\n                ->get();\n\n        foreach ($permissions_user as $role) {\n            array_push($permissions_list, $role->permission_id);\n        }\n\n        $module_permissions = Permission::whereIn('id', $permissions_list)->get();\n\n        return view('company.partials._mytasklistitems', [\n            'tasks' => $tasks,\n            'project_id' => $project_id,\n            'project_owner' => $project_owner,\n            'module_permissions' => $module_permissions\n        ]);\n    }\n\n    public function getSubprojectsForCompanyEmployee(Request $request, $user_id, $project_id, $company_id) {\n\n        //Get projects with their tasks and task permissions\n        $tasks = Task::where('project_id', $project_id)\n                ->orderBy('task_title', 'asc')\n                ->get();\n        $task_permissions = TaskCheckListPermission::where('user_id', $user_id)->where('company_id', $company_id)->get();\n\n        return view('company.partials._companytasklist', [\n            'tasks' => $tasks,\n            'task_permissions' => $task_permissions,\n            'user_id' => $user_id,\n            'project_id' => $project_id,\n            'company_id' => $company_id\n        ]);\n    }\n\n    public function getEmployees(Request $request, $company_id, $job_id) {\n\n        $user_id = Auth::user('user')->user_id;\n\n        //Get employees of the company except for the logged in user\n        $employees = Profile::with('user')\n                ->where('user_id', '<>', $user_id)\n                ->where('company_id', $company_id)\n                ->get();\n\n        //Get company permissions\n        $shared_company_jobs_permissions = ShareJobCompanyPermission::where('company_id', $company_id)->where('job_id', $job_id)->get();\n\n        return view('company.partials._employeelist', [\n            'employees' => $employees,\n            'shared_company_jobs_permissions' => $shared_company_jobs_permissions,\n            'job_id' => $job_id\n        ]);\n    }\n\n    public function getCompanyEmployeesForProject(Request $request, $project_id, $company_id) {\n\n        //Get employees of the company except for the logged in user\n        $employees = Profile::with('user')\n                ->where('company_id', $company_id)\n                ->get();\n\n        return view('company.partials._projectemployeelist', [\n            'employees' => $employees,\n            'project_id' => $project_id,\n            'company_id' => $company_id\n        ]);\n    }\n\n    public function shareToCompanyEmployee(Request $request) {\n\n        $user_id = $request->input('user_id');\n        $company_id = $request->input('company_id');\n        $job_id = $request->input('job_id');\n\n\n        $company_permission = new ShareJobCompanyPermission();\n        $company_permission->user_id = $user_id;\n        $company_permission->company_id = $company_id;\n        $company_permission->job_id = $job_id;\n        $company_permission->save();\n\n        return \"true\";\n    }\n\n    public function unshareFromCompanyEmployee(Request $request) {\n\n        $user_id = $request->input('user_id');\n        $company_id = $request->input('company_id');\n        $job_id = $request->input('job_id');\n\n\n        $company_permission = ShareJobCompanyPermission::where('user_id', $user_id)->where('company_id', $company_id)->where('job_id', $job_id);\n        $company_permission->delete();\n\n        return \"true\";\n    }\n\n    public function companyLinks($company_id){\n        $user_id = Auth::user('user')->user_id;\n        $user = User::find($user_id);\n\n        $links = Link::where('company_id',$company_id)\n            ->get();\n        $category = LinkCategory::all()\n            ->lists('name', 'id')\n            ->toArray();\n        $_links = [];\n\n        foreach($links as $link){\n            $category_name = $link->category_id ? $category[$link->category_id] : 'No Category';\n            $_links[$category_name][] = (Object)$link;\n        }\n        ksort($_links);\n\n        $user_profile_role = Profile::where('user_id', $user_id)\n            ->where('company_id', $company_id)\n            ->first();\n\n        $permissions_list = [];\n\n        $permissions_user = PermissionUser::with('permission')\n            ->where('company_id', $company_id)\n            ->where('user_id', $user_id)\n            ->get();\n\n        foreach ($permissions_user as $role) {\n            array_push($permissions_list, $role->permission_id);\n        }\n\n        $module_permissions = Permission::whereIn('id', $permissions_list)->get();\n\n        $assets = ['companies', 'real-time'];\n\n        return view(\n            'company.partials._companylinks',[\n                'links' => $_links,\n                'assets' => $assets,\n                'module_permissions' => $module_permissions\n            ]);\n    }\n}\n\n?>\n","undoManager":{"mark":-2,"position":1,"stack":[[{"start":{"row":21,"column":24},"end":{"row":21,"column":25},"action":"remove","lines":["L"],"id":2}],[{"start":{"row":21,"column":24},"end":{"row":21,"column":25},"action":"insert","lines":["l"],"id":3}]]},"ace":{"folds":[],"scrolltop":4,"scrollleft":0,"selection":{"start":{"row":20,"column":20},"end":{"row":20,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1470880213714}